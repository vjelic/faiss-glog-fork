{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-3b8a1f26-472a-479c-8a21-a7d6f7871f7f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7ea282ec-5063-4df3-8bf0-9b5b82b4f0e2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0b091af1-8af7-4be5-a08d-9f68a5f25aa7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-32befe72-d2dd-4412-95dc-30240e33bf74",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4ed389f8-f22f-4d07-95d1-9be4892c1c1e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c1991d92-3279-4234-8d5b-c254b94e09a7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-80ba8578-443c-41f0-8884-d05d01aa9e3c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0dbfb5cf-a4e0-47fc-86ef-71f7543f81e4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ef2efcbf-0e02-455a-b951-ae241f4aa43f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d6a20a4e-442d-4cd6-b19e-dd1708a6fb88",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-50dfc143-abcf-4acb-9833-059fd49662e3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e04699dc-c37a-442e-9918-1c8ec3219c6f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-d642cf12-6dd4-40ef-85b2-652a27559cc0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-92b26a07-9ee0-434b-9385-1738acc02634",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-92edef8b-123a-4f99-bf46-83a50c0c3584",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-478f33cc-a1d5-4e59-aef1-28fad5e3c044",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-471b11f2-f025-4620-a66a-b6b3794cc91e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-f35a4364-a488-430e-9d17-88592ba26ce2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-fd511e42-69a4-4541-a823-ce2bb989319d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-621851bf-ccbd-4d0b-a629-c48e1cd53318",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-65c9b3ef-5783-4081-a0f5-83c17f0508af",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-83e38cec-6ead-459c-88ff-598bd3cbc4a2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-4c774dd8-53fe-44ff-9d88-f89c499dbdcd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-cbdc2a10-5867-44c8-8715-1165b688d9ab",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-6f56cfb6-a280-4f77-a0e2-f83c29ffddd0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-03caee60-61a6-47c2-ac1c-16933e843f35",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-27ae9b16-b631-43b0-8e0c-9a49794b2684",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e8c73743-b862-432d-9520-513cc8686ddb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-b818d0ae-8e58-4b0d-bc20-5a6dea6693ba",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1447f30a-7c19-4ed8-ac7c-209cfe7004d0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-15d67740-0337-4d0b-ae77-d19d8fd47763",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-757084ee-b9eb-46e3-bac4-479a5577b25f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f8bea0c6-0363-4017-ab1c-9d9467262740",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8b75d30a-73d1-4bc5-80c5-1ae238920d1a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c50f0237-5bbc-4b28-a3f2-407d73fdaa8d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5283f118-f85a-4145-aaac-b8fa7e2b1d11",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-192aaa0e-bd7f-4997-9f8e-aab9e8cbfeb2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-a103ed70-cb11-4432-afd6-1c3e96d596c5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3bee5821-e80f-435e-9555-1b22ee05548d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-5a949c04-989f-421d-8c5b-7cbb93be803d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-032fe87b-6b15-42dc-86f4-b472afb767fd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-5da3655d-6a08-4fb6-bbbf-b6bb9da3ba95",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-b4f6a1d4-6c80-4342-a8a1-96712becb583",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-60a3cda2-9433-4727-9438-aa4de2a9b9ed",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-a6b9a770-fa46-4fac-aeba-31bd13f8a1c4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-c361f8bc-f0c3-49c0-9133-b28777aaed5e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-67ace523-f8da-4ab5-8d49-c6b6c442c4c8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-f56b96fa-c20a-4d0a-b729-e11af62a046f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-86afccf8-54df-467f-8c68-d27f5dca89fc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-63aef598-3804-4c74-ae1c-4ef875d16194",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-0e515fad-bf32-4e65-91f5-0444df61b0d3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-668eb674-364c-4cd3-92d1-40d4af9f053c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-3a08d738-383f-42bd-a4e9-7d46698f5991",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-57a59c07-b5cb-4c86-ad00-1689004f0e5d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-151a0782-36e3-46d2-8fcf-88bb47305f5d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-75244097-bf68-4b2b-b276-3aca817d4b4e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-da9f68f5-0217-460b-af28-b8cab9bc60c0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-33217a1e-1c3e-4fa2-a64f-6d31ebbec5cf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-99660db8-8f95-42d0-9045-872476c87a0c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-f646bb93-0b87-4814-8c28-c9fa1f2ff13b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-032f1793-d218-4d33-8e34-6c38547e11a8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-cc5f8b3f-c224-429d-9913-4feb1c54fc8b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-278270b6-d578-4c45-a522-f4b3722ce9af",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-b21bf1c2-dcb6-45f2-a588-e1183a695eab",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-43ccbd46-16f3-486c-9bd2-96390faf75b2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1e11047c-adaa-42e5-87d1-1f761532c667",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8e83e1ae-3783-4345-82f4-c6e2597cb12a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-121a2ea7-9ac1-4fde-b134-e4b45d105684",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1bc952b6-3176-4698-8177-f66f71ef3caa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b645429f-3923-4836-88dd-216fb9720eae",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-8dca6242-acd5-4b37-8ca7-9d1f9ba85159",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-8946496b-f9bc-4555-a112-db030ba0551b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-fed1e54f-7849-4823-b558-b249d3ac3968",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-68e69a98-dbc3-43fc-ac29-9d5a834e74ee",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-95128e38-04a4-4e8b-8d3d-dc1c87d1cedc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-f3602791-a025-473f-bc22-5f415595c508",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1cf0bb2f-39de-47ce-b8dd-d69801af704a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-ba9fc656-861f-4785-a309-b64c86a88245",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-0303dfaa-b383-48b1-852d-9eedba5a2125",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-7aa479ec-c40e-4a8a-8e09-3fd32b808994",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-59b637cf-e74a-49d0-8449-eedd0cbc5d69",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-2f7f660c-a66c-4066-b61d-fb9f3dd50f38",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-cdcfeb1c-faca-43f0-ba1a-70eae17df9aa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-65c7088a-e8a8-41a7-8bff-b6e02f98520b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-77964857-12ad-4177-a84a-63ef360675cf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-9279c503-7cb6-44b9-ab53-b9db48c2fb50",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-74844278-cd70-4190-b5b2-716f6a246579",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0b68b011-6822-409a-90bd-105e96690908",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-e08fe9cf-e8f3-4faa-8207-d885a1316a5d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-00230d86-4cb6-4b1b-9a64-90b88eecbe58",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-c06c806c-a361-4ca9-a763-b7f8b1d8e2b4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-82544947-2a15-4de4-b3cd-6a2b2e3a4701",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-ae67ce0f-1d20-49de-b79e-7995b799c42c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-aa8dcf79-5abe-4ac3-8ec5-7eaf2b57cdb8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-6fceb93e-e783-4c89-a8c1-bc644305fb49",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9bb1b11f-e18a-4a04-8193-309306a3818a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6ef19dd2-a8d9-44b4-affb-f99a6614aeff",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-08e417fa-3a16-49c8-890e-c6345fde2f2e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-221a7fde-2ca1-46b9-9e79-a77a0cd70eb4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-13e3ccbe-65ee-4022-8657-b73ba614f9e0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3f6ec5fa-684d-4c52-b4a4-f4eb291cd711",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-55fd87d4-bc9a-4583-b83a-f6b3f6160544",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b0585ddf-0940-4f96-8f58-2af6d8d36e0d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-7d071b2d-e815-489f-8eb3-fe69f6794442",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-35102e4f-0cb6-4ae8-9bad-c38119de467a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-352bcce1-6df8-4beb-b9ae-e6467edf3786",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-73bf53f7-2bd9-4a0f-a1ea-8831bd22a254",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-2eca7a3b-4725-409d-b9a8-16518ee03481",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-55a55882-db17-4b3c-b691-0cc84527dd96",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-db64a136-a329-4ec0-a76e-02f912aeda51",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8c02df18-9863-43ad-8579-df2ce5d43824",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-3424e7ac-8135-4065-b0ab-5b1c95ecbfc8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-7265d263-004e-4bda-b0e8-f1a916eaf560",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-fc9d7b2e-6a9c-4cd9-ae47-3880bd968daf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-5976bccd-a67b-49fe-8970-1b2cb5090aa6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a624fda9-91c9-49df-83d3-c46f3126d64d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ff47668a-03b6-4b97-95d1-66a97d980a39",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5203392b-652e-4933-abbb-b659fd01a2e4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-2d8e3e58-ba16-4e82-88ea-d1356891bade",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-daa7b8f5-44dc-4f3c-aa34-e69322bf5ae4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-fa5ec745-46e4-434c-9dc6-75525bec7c87",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-26e96fa7-abd0-4797-9b49-c4739133a073",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c8368ffa-a584-437a-8b20-48ed2099d746",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d0992b4c-4332-4923-951f-2f3d93263c9f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4531c16d-2daa-4086-8080-647458871c59",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8efa1d8c-4399-4877-9608-8685373dfdf2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6324c837-c10a-4dd2-b44c-ca7be1f20b3a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-888c0144-276d-4e93-ab2b-cbf2dbae5774",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1d74bbdb-aa81-404d-a083-fb16a174a4a0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-93ab8f59-372e-4a8f-a8ac-89d1adbc1e57",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-100ffaaa-6544-4f5f-a5de-a9425ca16729",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fbcc03b5-a5c2-468c-8f32-d4f23ec3a5ae",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e11005ab-75b0-4917-aebc-a30adb8303a5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-223dcec7-0de3-4701-8879-6793afa9d803",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-055ceded-2bad-4a3c-a4be-c78c30bcd5fb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6b8e6acb-3155-4162-b88c-3f2b33a5f224",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a4d65bf5-bb5a-4da3-9639-58633d21eb5f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f55c12d0-b666-4b8d-9eb0-b77f18f50b9b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9a80032d-1bfa-4a48-8f5b-5735fb7e7710",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a1819b93-c9bd-43d7-96b8-b72e3f9b6e51",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-33650d16-25da-4374-b335-c8450d67d128",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-963189b8-e4b8-4776-a231-fcbf296dd806",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4b38a5c4-111b-4174-a166-a5b1265e0c94",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-afc2e459-0127-47b0-9d99-a30e8ff724cf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8c674b51-675d-41f0-81b0-79db6fc61666",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c0829ab8-7242-4885-8645-a20ebe376822",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ec6a8977-9225-4599-9af0-448cf213480d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7ec0f674-fa61-4840-a848-9636b3dd8fda",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f14acfbb-5898-40c9-aad5-627ca08d9cd6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c0567791-7d69-4575-a4da-b29d36587c69",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6e4d15d0-2fb7-4a53-b495-c565beb9ac53",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-a3eeb146-dbb7-4145-a896-46bbbfac2c34",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2ddc7795-73c8-4b42-bebf-0bf55cee82ed",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6cfc48e1-64e5-4159-8afc-13374311f10f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ee3579c4-0b82-4d89-b08c-7518809c0e6b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-986e274a-3181-4f9d-86eb-177a8ee475a6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-302cf6d0-7a1e-42ac-8bf6-103c68f21376",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-e2120b9d-a258-4611-b2dd-f494557971ec",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-20126071-a474-4de2-bcbe-c24b9d1b0fbc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7d73affb-0adb-482e-b231-8e42aab2cf65",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-700a1057-a7b6-4ad7-aa39-8f1fe41c906f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b3599703-3a59-43c0-9fb2-e9f93c8b9244",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-292d4056-c48f-4e68-b1d7-3e3c954ee7b5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-234cfcb9-f4ac-4c9d-8fed-2253d0ac6927",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d7157e4c-b8c8-42b1-b959-240b840fbe67",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9889aae0-0755-4839-b695-022f0f218e81",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3e1a4fe3-2db4-4321-84ad-d17329b36a4e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3b250ad5-2de4-4e93-ab32-df8d326aa62b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1b162663-d8d7-41f5-bf3e-4322bb10e051",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d5b60089-60a5-47c3-90b5-e51e2124b913",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-85cb3f6b-aea5-4232-bdda-b32fced6418a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b8c213ff-fc02-482b-9a99-2a2a2a8c5222",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-29db3f77-d563-4eb0-954e-99bc1867f923",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-36c8e8fd-b63c-44ca-8c4a-b7e91fdcae12",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bdc95ece-6ac7-424e-a39b-1782408fe1b9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-af1f2f6b-0fc5-41d3-a482-2933d1ea5251",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9799e3ff-74f5-4d0b-8b7b-2e61e3e2a414",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ae2c15cb-c654-480b-8c20-b9250eea1131",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-41ae1a80-a351-45ef-855c-58277c489b72",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-99e9b8f4-99ca-4fe7-9de6-b85be846213f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b54126c9-f433-4b2a-b32a-751d55e96070",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9d45364c-f7a5-476c-942d-a91bcae92757",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9d83e2d0-8e65-4a1f-b952-9512789180b2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-df608d70-6a1f-48f0-ab10-8c1d7527a5bc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a68b3597-e990-4b7a-bac8-cf58c6c9aad3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-31a5f8a2-5bcf-4548-8765-2712b6376612",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a8283b67-88c7-4b67-832a-7b26e6d8a1ee",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b9abbd6f-a226-4692-b1bf-046c1cb8b57f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5db5f452-f54f-4f42-87a1-1e3d2ab87341",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ba28dce4-ae8b-4b5a-97f3-afb959514a5b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7457b4af-a69f-4afa-9243-46e96e943f3a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ddc7e0d0-81d9-4a71-bfc4-d2905bc7c226",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6ec671bd-7184-43b2-889f-53977d7e4c71",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7755715f-b03f-4657-bbe7-75f10dccca47",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-40130916-6f60-4c60-8f2e-998ec36a59ac",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-08582e80-e7a8-4ef8-81a4-5fef65d9d21f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-3de2c443-b439-45bc-bc68-7c9282879d15",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-01f7374b-eabc-4337-85cd-98bbaac5fca4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-c13a4c94-6573-48bb-b9bb-5273c23f3f17",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-8b87469c-c4aa-41e5-9eea-51e5c67a034e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-54ed6d7d-b91f-4a19-bead-505418e4fdcb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-3fd5ef3f-434d-4549-807c-bfe9e2c2e719",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-fde6f7ea-6c69-4586-a18f-7b44b0f9b64f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-fe70a052-32bd-4cd9-ab3d-e3e2609318e8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-29288e4e-a2a0-448c-996c-325abd7f2f04",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-501dcaf4-215e-49c3-a101-ee2e9cde85d5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-81e2c9ca-2d7e-4669-8dfc-dddf8485ec8e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0bd0d64b-017b-4ba0-a1d2-432565daf97f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e612c43a-6825-48e4-b855-97ff9e68d10e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a6fb02c4-8bd9-459a-9cd4-1cad392e5649",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cee44ef6-baaa-455e-8919-34f496818a2d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-015e632c-b90f-4683-9749-eb7dfdc0fb09",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a897e991-20c1-4437-9f80-c29f1c87a30c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d2955149-a723-48b7-a82d-db4d490240b5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-771ad9c7-e665-45ce-8e56-a032628ca05f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-09e491a3-b749-442a-b1bb-cf93374bd86e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-04a9d25f-552d-4d92-945d-a440f5cae28c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c680db7b-f508-4f84-aefa-30f6dffac7ff",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fe46cbd7-7f24-4661-851d-0ef7d44c2408",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-dbd3021d-720d-41e1-aa56-66f2c3ccad05",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-3b8a1f26-472a-479c-8a21-a7d6f7871f7f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 16,
                  "endLine": 416,
                  "endColumn": 77,
                  "charOffset": 12335,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(&centroids[i * d], x + perm[i] * line_size, line_size)",
                    "rendered": {
                      "text": "memcpy(&centroids[i * d], x + perm[i] * line_size, line_size)",
                      "markdown": "`memcpy(&centroids[i * d], x + perm[i] * line_size, line_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12335,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&centroids[i * d], <size of &centroids[i * d]>,  x + perm[i] * line_size,  line_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ef733d37-f2d3-4468-812e-07252f7bb563",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 4,
                  "endLine": 597,
                  "endColumn": 63,
                  "charOffset": 17742,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(centroids, clus.centroids.data(), sizeof(*centroids)",
                    "rendered": {
                      "text": "memcpy(centroids, clus.centroids.data(), sizeof(*centroids)",
                      "markdown": "`memcpy(centroids, clus.centroids.data(), sizeof(*centroids)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17742,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids, <size of centroids>,  clus.centroids.data(),  sizeof(*centroids)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7ea282ec-5063-4df3-8bf0-9b5b82b4f0e2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 12,
                  "endLine": 342,
                  "endColumn": 56,
                  "charOffset": 9983,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(centroids.data(), x_in, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(centroids.data(), x_in, sizeof(float)",
                      "markdown": "`memcpy(centroids.data(), x_in, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9983,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids.data(), <size of centroids.data()>,  x_in,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0b091af1-8af7-4be5-a08d-9f68a5f25aa7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 8,
                  "endLine": 628,
                  "endColumn": 39,
                  "charOffset": 18842,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(dest, src, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(dest, src, sizeof(float)",
                      "markdown": "`memcpy(dest, src, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18842,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest, <size of dest>,  src,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-32befe72-d2dd-4412-95dc-30240e33bf74",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 12,
                  "endLine": 244,
                  "endColumn": 37,
                  "charOffset": 6897,
                  "charLength": 103,
                  "snippet": {
                    "text": "memcpy(centroids + ci * d,\n                   centroids + cj * d,\n                   sizeof(*centroids)",
                    "rendered": {
                      "text": "memcpy(centroids + ci * d,\n                   centroids + cj * d,\n                   sizeof(*centroids)",
                      "markdown": "`memcpy(centroids + ci * d,\n                   centroids + cj * d,\n                   sizeof(*centroids)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6897,
                        "charLength": 103
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids + ci * d, <size of centroids + ci * d>, \n                   centroids + cj * d, \n                   sizeof(*centroids)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4ed389f8-f22f-4d07-95d1-9be4892c1c1e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 8,
                  "endLine": 110,
                  "endColumn": 73,
                  "charOffset": 2774,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(x_new + i * line_size, x + perm[i] * line_size, line_size)",
                    "rendered": {
                      "text": "memcpy(x_new + i * line_size, x + perm[i] * line_size, line_size)",
                      "markdown": "`memcpy(x_new + i * line_size, x + perm[i] * line_size, line_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2774,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x_new + i * line_size, <size of x_new + i * line_size>,  x + perm[i] * line_size,  line_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c1991d92-3279-4234-8d5b-c254b94e09a7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexBinaryFlat.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 4,
                  "endLine": 101,
                  "endColumn": 58,
                  "charOffset": 2626,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(recons, &(xb[code_size * key]), sizeof(*recons)",
                    "rendered": {
                      "text": "memcpy(recons, &(xb[code_size * key]), sizeof(*recons)",
                      "markdown": "`memcpy(recons, &(xb[code_size * key]), sizeof(*recons)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexBinaryFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2626,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(recons, <size of recons>,  &(xb[code_size * key]),  sizeof(*recons)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-80ba8578-443c-41f0-8884-d05d01aa9e3c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFPQFastScan.cpp"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 12,
                  "endLine": 304,
                  "endColumn": 58,
                  "charOffset": 8903,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(biases.get(), coarse_dis, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(biases.get(), coarse_dis, sizeof(float)",
                      "markdown": "`memcpy(biases.get(), coarse_dis, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFPQFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8903,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(biases.get(), <size of biases.get()>,  coarse_dis,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0dbfb5cf-a4e0-47fc-86ef-71f7543f81e4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFPQFastScan.cpp"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 16,
                  "endLine": 250,
                  "endColumn": 62,
                  "charOffset": 6722,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(biases.get(), coarse_dis, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(biases.get(), coarse_dis, sizeof(float)",
                      "markdown": "`memcpy(biases.get(), coarse_dis, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFPQFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6722,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(biases.get(), <size of biases.get()>,  coarse_dis,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ef2efcbf-0e02-455a-b951-ae241f4aa43f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFPQFastScan.cpp"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 8,
                  "endLine": 80,
                  "endColumn": 41,
                  "charOffset": 1954,
                  "charLength": 119,
                  "snippet": {
                    "text": "memcpy(precomputed_table.get(),\n               orig.precomputed_table.data(),\n               precomputed_table.nbytes()",
                    "rendered": {
                      "text": "memcpy(precomputed_table.get(),\n               orig.precomputed_table.data(),\n               precomputed_table.nbytes()",
                      "markdown": "`memcpy(precomputed_table.get(),\n               orig.precomputed_table.data(),\n               precomputed_table.nbytes()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFPQFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1954,
                        "charLength": 119
                      },
                      "insertedContent": {
                        "text": "memcpy_s(precomputed_table.get(), <size of precomputed_table.get()>, \n               orig.precomputed_table.data(), \n               precomputed_table.nbytes()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d6a20a4e-442d-4cd6-b19e-dd1708a6fb88",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexLSH.cpp"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 12,
                  "endLine": 175,
                  "endColumn": 67,
                  "charOffset": 4876,
                  "charLength": 55,
                  "snippet": {
                    "text": "memcpy(x + i * d, xt + i * nbits, nbits * sizeof(xt[0])",
                    "rendered": {
                      "text": "memcpy(x + i * d, xt + i * nbits, nbits * sizeof(xt[0])",
                      "markdown": "`memcpy(x + i * d, xt + i * nbits, nbits * sizeof(xt[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexLSH.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4876,
                        "charLength": 55
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x + i * d, <size of x + i * d>,  xt + i * nbits,  nbits * sizeof(xt[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-50dfc143-abcf-4acb-9833-059fd49662e3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexLSH.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 12,
                  "endLine": 61,
                  "endColumn": 36,
                  "charOffset": 1611,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(xt, x, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xt, x, sizeof(*x)",
                      "markdown": "`memcpy(xt, x, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexLSH.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1611,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xt, <size of xt>,  x,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e04699dc-c37a-442e-9918-1c8ec3219c6f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 19,
                  "endLine": 100,
                  "endColumn": 48,
                  "charOffset": 3120,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(k * nq * sizeof(float)",
                    "rendered": {
                      "text": "malloc(k * nq * sizeof(float)",
                      "markdown": "`malloc(k * nq * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3120,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d642cf12-6dd4-40ef-85b2-652a27559cc0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 19,
                  "endLine": 99,
                  "endColumn": 48,
                  "charOffset": 3069,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(k * nq * sizeof(idx_t)",
                    "rendered": {
                      "text": "malloc(k * nq * sizeof(idx_t)",
                      "markdown": "`malloc(k * nq * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3069,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-92b26a07-9ee0-434b-9385-1738acc02634",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 19,
                  "endLine": 87,
                  "endColumn": 47,
                  "charOffset": 2688,
                  "charLength": 28,
                  "snippet": {
                    "text": "malloc(k * 5 * sizeof(float)",
                    "rendered": {
                      "text": "malloc(k * 5 * sizeof(float)",
                      "markdown": "`malloc(k * 5 * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2688,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-92edef8b-123a-4f99-bf46-83a50c0c3584",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 19,
                  "endLine": 86,
                  "endColumn": 47,
                  "charOffset": 2638,
                  "charLength": 28,
                  "snippet": {
                    "text": "malloc(k * 5 * sizeof(idx_t)",
                    "rendered": {
                      "text": "malloc(k * 5 * sizeof(idx_t)",
                      "markdown": "`malloc(k * 5 * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2638,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-478f33cc-a1d5-4e59-aef1-28fad5e3c044",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 16,
                  "endLine": 48,
                  "endColumn": 45,
                  "charOffset": 1346,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(d * nq * sizeof(float)",
                    "rendered": {
                      "text": "malloc(d * nq * sizeof(float)",
                      "markdown": "`malloc(d * nq * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1346,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-471b11f2-f025-4620-a66a-b6b3794cc91e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 16,
                  "endLine": 47,
                  "endColumn": 45,
                  "charOffset": 1298,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(d * nb * sizeof(float)",
                    "rendered": {
                      "text": "malloc(d * nb * sizeof(float)",
                      "markdown": "`malloc(d * nb * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1298,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f35a4364-a488-430e-9d17-88592ba26ce2",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 36,
                  "endLine": 32,
                  "endColumn": 44,
                  "charOffset": 943,
                  "charLength": 8,
                  "snippet": {
                    "text": "RAND_MAX",
                    "rendered": {
                      "text": "RAND_MAX",
                      "markdown": "`RAND_MAX`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-fd511e42-69a4-4541-a823-ce2bb989319d",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 19,
                  "endLine": 32,
                  "endColumn": 24,
                  "charOffset": 926,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-621851bf-ccbd-4d0b-a629-c48e1cd53318",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 42,
                  "endLine": 772,
                  "endColumn": 45,
                  "charOffset": 24541,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24541,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24541,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-65c9b3ef-5783-4081-a0f5-83c17f0508af",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 42,
                  "endLine": 669,
                  "endColumn": 45,
                  "charOffset": 21692,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21692,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21692,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-83e38cec-6ead-459c-88ff-598bd3cbc4a2",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 42,
                  "endLine": 593,
                  "endColumn": 45,
                  "charOffset": 19140,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19140,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19140,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-4c774dd8-53fe-44ff-9d88-f89c499dbdcd",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 42,
                  "endLine": 535,
                  "endColumn": 45,
                  "charOffset": 17610,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17610,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17610,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-cbdc2a10-5867-44c8-8715-1165b688d9ab",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 42,
                  "endLine": 415,
                  "endColumn": 45,
                  "charOffset": 13642,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13642,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13642,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-6f56cfb6-a280-4f77-a0e2-f83c29ffddd0",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 42,
                  "endLine": 403,
                  "endColumn": 45,
                  "charOffset": 13221,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13221,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13221,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-03caee60-61a6-47c2-ac1c-16933e843f35",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 42,
                  "endLine": 215,
                  "endColumn": 45,
                  "charOffset": 6189,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6189,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6189,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-27ae9b16-b631-43b0-8e0c-9a49794b2684",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 9,
                  "endLine": 113,
                  "endColumn": 39,
                  "charOffset": 3278,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(bytes, ds, sizeof(char)",
                    "rendered": {
                      "text": "memcpy(bytes, ds, sizeof(char)",
                      "markdown": "`memcpy(bytes, ds, sizeof(char)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3278,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes, <size of bytes>,  ds,  sizeof(char)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e8c73743-b862-432d-9520-513cc8686ddb",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 12,
                  "endLine": 96,
                  "endColumn": 15,
                  "charOffset": 2761,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2761,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2761,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-b818d0ae-8e58-4b0d-bc20-5a6dea6693ba",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFastScan.cpp"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 12,
                  "endLine": 171,
                  "endColumn": 29,
                  "charOffset": 4748,
                  "charLength": 139,
                  "snippet": {
                    "text": "memcpy(list_codes.data() + (i - i0) * code_size,\n                   flat_codes.data() + order[i] * code_size,\n                   code_size)",
                    "rendered": {
                      "text": "memcpy(list_codes.data() + (i - i0) * code_size,\n                   flat_codes.data() + order[i] * code_size,\n                   code_size)",
                      "markdown": "`memcpy(list_codes.data() + (i - i0) * code_size,\n                   flat_codes.data() + order[i] * code_size,\n                   code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4748,
                        "charLength": 139
                      },
                      "insertedContent": {
                        "text": "memcpy_s(list_codes.data() + (i - i0) * code_size, <size of list_codes.data() + (i - i0) * code_size>, \n                   flat_codes.data() + order[i] * code_size, \n                   code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1447f30a-7c19-4ed8-ac7c-209cfe7004d0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexBinaryIVF.cpp"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 4,
                  "endLine": 232,
                  "endColumn": 61,
                  "charOffset": 6617,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(recons, invlists->get_single_code(list_no, offset)",
                    "rendered": {
                      "text": "memcpy(recons, invlists->get_single_code(list_no, offset)",
                      "markdown": "`memcpy(recons, invlists->get_single_code(list_no, offset)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexBinaryIVF.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6617,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(recons, <size of recons>,  invlists->get_single_code(list_no,  offset)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-15d67740-0337-4d0b-ae77-d19d8fd47763",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/sorting.cpp"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 12,
                  "endLine": 519,
                  "endColumn": 53,
                  "charOffset": 15120,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(ptrs.data(), lims, sizeof(lims[0])",
                    "rendered": {
                      "text": "memcpy(ptrs.data(), lims, sizeof(lims[0])",
                      "markdown": "`memcpy(ptrs.data(), lims, sizeof(lims[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/sorting.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15120,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs.data(), <size of ptrs.data()>,  lims,  sizeof(lims[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-757084ee-b9eb-46e3-bac4-479a5577b25f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/sorting.cpp"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 16,
                  "endLine": 183,
                  "endColumn": 36,
                  "charOffset": 5052,
                  "charLength": 106,
                  "snippet": {
                    "text": "memcpy(permB + segs[s].i0,\n                       permA + segs[s].i0,\n                       segs[s].len()",
                    "rendered": {
                      "text": "memcpy(permB + segs[s].i0,\n                       permA + segs[s].i0,\n                       segs[s].len()",
                      "markdown": "`memcpy(permB + segs[s].i0,\n                       permA + segs[s].i0,\n                       segs[s].len()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/sorting.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5052,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "memcpy_s(permB + segs[s].i0, <size of permB + segs[s].i0>, \n                       permA + segs[s].i0, \n                       segs[s].len()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f8bea0c6-0363-4017-ab1c-9d9467262740",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/sorting.cpp"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 12,
                  "endLine": 121,
                  "endColumn": 55,
                  "charOffset": 3439,
                  "charLength": 43,
                  "snippet": {
                    "text": "memcpy(dst + sw.i0, src + s2t.i0, s2t.len()",
                    "rendered": {
                      "text": "memcpy(dst + sw.i0, src + s2t.i0, s2t.len()",
                      "markdown": "`memcpy(dst + sw.i0, src + s2t.i0, s2t.len()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/sorting.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3439,
                        "charLength": 43
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst + sw.i0, <size of dst + sw.i0>,  src + s2t.i0,  s2t.len()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8b75d30a-73d1-4bc5-80c5-1ae238920d1a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFAdditiveQuantizerFastScan.cpp"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 12,
                  "endLine": 463,
                  "endColumn": 59,
                  "charOffset": 13522,
                  "charLength": 47,
                  "snippet": {
                    "text": "memcpy(tab, norm_lut, norm_dim12 * sizeof(*tab)",
                    "rendered": {
                      "text": "memcpy(tab, norm_lut, norm_dim12 * sizeof(*tab)",
                      "markdown": "`memcpy(tab, norm_lut, norm_dim12 * sizeof(*tab)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFAdditiveQuantizerFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13522,
                        "charLength": 47
                      },
                      "insertedContent": {
                        "text": "memcpy_s(tab, <size of tab>,  norm_lut,  norm_dim12 * sizeof(*tab)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c50f0237-5bbc-4b28-a3f2-407d73fdaa8d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/sorting.cpp"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 12,
                  "endLine": 118,
                  "endColumn": 55,
                  "charOffset": 3285,
                  "charLength": 43,
                  "snippet": {
                    "text": "memcpy(dst + sw.i0, src + s1t.i0, s1t.len()",
                    "rendered": {
                      "text": "memcpy(dst + sw.i0, src + s1t.i0, s1t.len()",
                      "markdown": "`memcpy(dst + sw.i0, src + s1t.i0, s1t.len()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/sorting.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3285,
                        "charLength": 43
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst + sw.i0, <size of dst + sw.i0>,  src + s1t.i0,  s1t.len()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5283f118-f85a-4145-aaac-b8fa7e2b1d11",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/AutoTune.cpp"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 47,
                  "endLine": 565,
                  "endColumn": 67,
                  "charOffset": 16173,
                  "charLength": 20,
                  "snippet": {
                    "text": "strlen(\"quantizer_\")",
                    "rendered": {
                      "text": "strlen(\"quantizer_\")",
                      "markdown": "`strlen(\"quantizer_\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16173,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16173,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strnlen(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-192aaa0e-bd7f-4997-9f8e-aab9e8cbfeb2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/AutoTune.cpp"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 47,
                  "endLine": 470,
                  "endColumn": 67,
                  "charOffset": 13649,
                  "charLength": 20,
                  "snippet": {
                    "text": "strlen(\"quantizer_\")",
                    "rendered": {
                      "text": "strlen(\"quantizer_\")",
                      "markdown": "`strlen(\"quantizer_\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13649,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13649,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strnlen(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a103ed70-cb11-4432-afd6-1c3e96d596c5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/AutoTune.cpp"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 4,
                  "endLine": 58,
                  "endColumn": 48,
                  "charOffset": 1478,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(gt_I.data(), gt_I_in, sizeof(gt_I[0])",
                    "rendered": {
                      "text": "memcpy(gt_I.data(), gt_I_in, sizeof(gt_I[0])",
                      "markdown": "`memcpy(gt_I.data(), gt_I_in, sizeof(gt_I[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1478,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(gt_I.data(), <size of gt_I.data()>,  gt_I_in,  sizeof(gt_I[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3bee5821-e80f-435e-9555-1b22ee05548d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/gpu/GpuAutoTune.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 47,
                  "endLine": 103,
                  "endColumn": 67,
                  "charOffset": 2867,
                  "charLength": 20,
                  "snippet": {
                    "text": "strlen(\"quantizer_\")",
                    "rendered": {
                      "text": "strlen(\"quantizer_\")",
                      "markdown": "`strlen(\"quantizer_\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/gpu/GpuAutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2867,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/gpu/GpuAutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2867,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strnlen(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5a949c04-989f-421d-8c5b-7cbb93be803d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/AutoTune.cpp"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 8,
                  "endLine": 55,
                  "endColumn": 52,
                  "charOffset": 1377,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(gt_D.data(), gt_D_in, sizeof(gt_D[0])",
                    "rendered": {
                      "text": "memcpy(gt_D.data(), gt_D_in, sizeof(gt_D[0])",
                      "markdown": "`memcpy(gt_D.data(), gt_D_in, sizeof(gt_D[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1377,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(gt_D.data(), <size of gt_D.data()>,  gt_D_in,  sizeof(gt_D[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-032fe87b-6b15-42dc-86f4-b472afb767fd",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 16,
                  "endLine": 437,
                  "endColumn": 19,
                  "charOffset": 11925,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11925,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11925,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-5da3655d-6a08-4fb6-bbbf-b6bb9da3ba95",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 46,
                  "endLine": 426,
                  "endColumn": 49,
                  "charOffset": 11673,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11673,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11673,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-b4f6a1d4-6c80-4342-a8a1-96712becb583",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 39,
                  "endLine": 424,
                  "endColumn": 42,
                  "charOffset": 11595,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11595,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11595,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-60a3cda2-9433-4727-9438-aa4de2a9b9ed",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 40,
                  "endLine": 422,
                  "endColumn": 43,
                  "charOffset": 11540,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11540,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11540,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-a6b9a770-fa46-4fac-aeba-31bd13f8a1c4",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 44,
                  "endLine": 420,
                  "endColumn": 47,
                  "charOffset": 11484,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11484,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11484,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-c361f8bc-f0c3-49c0-9133-b28777aaed5e",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 24,
                  "endLine": 417,
                  "endColumn": 27,
                  "charOffset": 11406,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11406,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11406,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-67ace523-f8da-4ab5-8d49-c6b6c442c4c8",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 28,
                  "endLine": 420,
                  "endColumn": 31,
                  "charOffset": 11468,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11468,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11468,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-f56b96fa-c20a-4d0a-b729-e11af62a046f",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 16,
                  "endLine": 371,
                  "endColumn": 19,
                  "charOffset": 10197,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10197,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10197,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-86afccf8-54df-467f-8c68-d27f5dca89fc",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 47,
                  "endLine": 360,
                  "endColumn": 50,
                  "charOffset": 9926,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9926,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9926,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-63aef598-3804-4c74-ae1c-4ef875d16194",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 43,
                  "endLine": 358,
                  "endColumn": 46,
                  "charOffset": 9863,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9863,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9863,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-0e515fad-bf32-4e65-91f5-0444df61b0d3",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 27,
                  "endLine": 358,
                  "endColumn": 30,
                  "charOffset": 9847,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9847,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9847,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-668eb674-364c-4cd3-92d1-40d4af9f053c",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 41,
                  "endLine": 356,
                  "endColumn": 44,
                  "charOffset": 9785,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9785,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9785,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-3a08d738-383f-42bd-a4e9-7d46698f5991",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 40,
                  "endLine": 354,
                  "endColumn": 43,
                  "charOffset": 9728,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9728,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9728,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-57a59c07-b5cb-4c86-ad00-1689004f0e5d",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 23,
                  "endLine": 351,
                  "endColumn": 26,
                  "charOffset": 9655,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9655,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9655,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-151a0782-36e3-46d2-8fcf-88bb47305f5d",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 28,
                  "endLine": 297,
                  "endColumn": 31,
                  "charOffset": 8052,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8052,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8052,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-75244097-bf68-4b2b-b276-3aca817d4b4e",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 47,
                  "endLine": 270,
                  "endColumn": 50,
                  "charOffset": 7413,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7413,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7413,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-da9f68f5-0217-460b-af28-b8cab9bc60c0",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 43,
                  "endLine": 268,
                  "endColumn": 46,
                  "charOffset": 7350,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7350,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7350,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-33217a1e-1c3e-4fa2-a64f-6d31ebbec5cf",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 27,
                  "endLine": 268,
                  "endColumn": 30,
                  "charOffset": 7334,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7334,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7334,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-99660db8-8f95-42d0-9045-872476c87a0c",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 40,
                  "endLine": 266,
                  "endColumn": 43,
                  "charOffset": 7273,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7273,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7273,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-f646bb93-0b87-4814-8c28-c9fa1f2ff13b",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 36,
                  "endLine": 264,
                  "endColumn": 39,
                  "charOffset": 7199,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7199,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7199,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-032f1793-d218-4d33-8e34-6c38547e11a8",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 40,
                  "endLine": 262,
                  "endColumn": 43,
                  "charOffset": 7147,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7147,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7147,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-cc5f8b3f-c224-429d-9913-4feb1c54fc8b",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 23,
                  "endLine": 259,
                  "endColumn": 26,
                  "charOffset": 7074,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7074,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7074,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-278270b6-d578-4c45-a522-f4b3722ce9af",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 30,
                  "endLine": 155,
                  "endColumn": 33,
                  "charOffset": 3954,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3954,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3954,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-b21bf1c2-dcb6-45f2-a588-e1183a695eab",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 29,
                  "endLine": 150,
                  "endColumn": 32,
                  "charOffset": 3807,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3807,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3807,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-43ccbd46-16f3-486c-9bd2-96390faf75b2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 20,
                  "endLine": 253,
                  "endColumn": 44,
                  "charOffset": 7182,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(xi, c, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xi, c, sizeof(*x)",
                      "markdown": "`memcpy(xi, c, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7182,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  c,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1e11047c-adaa-42e5-87d1-1f761532c667",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 20,
                  "endLine": 222,
                  "endColumn": 44,
                  "charOffset": 6173,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(xi, c, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xi, c, sizeof(*x)",
                      "markdown": "`memcpy(xi, c, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6173,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  c,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8e83e1ae-3783-4345-82f4-c6e2597cb12a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 12,
                  "endLine": 173,
                  "endColumn": 39,
                  "charOffset": 4583,
                  "charLength": 111,
                  "snippet": {
                    "text": "memcpy(xsub.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(float)",
                    "rendered": {
                      "text": "memcpy(xsub.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(float)",
                      "markdown": "`memcpy(xsub.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4583,
                        "charLength": 111
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xsub.data() + i * q->d, <size of xsub.data() + i * q->d>, \n                   x + i * d + offset_d, \n                   q->d * sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-121a2ea7-9ac1-4fde-b134-e4b45d105684",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 12,
                  "endLine": 106,
                  "endColumn": 36,
                  "charOffset": 2520,
                  "charLength": 106,
                  "snippet": {
                    "text": "memcpy(xt.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xt.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(*x)",
                      "markdown": "`memcpy(xt.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2520,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xt.data() + i * q->d, <size of xt.data() + i * q->d>, \n                   x + i * d + offset_d, \n                   q->d * sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1bc952b6-3176-4698-8177-f66f71ef3caa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 8,
                  "endLine": 125,
                  "endColumn": 73,
                  "charOffset": 3152,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(cb, q->codebooks.data(), sub_codebook_size * sizeof(float)",
                    "rendered": {
                      "text": "memcpy(cb, q->codebooks.data(), sub_codebook_size * sizeof(float)",
                      "markdown": "`memcpy(cb, q->codebooks.data(), sub_codebook_size * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3152,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(cb, <size of cb>,  q->codebooks.data(),  sub_codebook_size * sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b645429f-3923-4836-88dd-216fb9720eae",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 29,
                  "endLine": 146,
                  "endColumn": 32,
                  "charOffset": 3688,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3688,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3688,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-8dca6242-acd5-4b37-8ca7-9d1f9ba85159",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 49,
                  "endLine": 87,
                  "endColumn": 52,
                  "charOffset": 2108,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2108,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2108,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-8946496b-f9bc-4555-a112-db030ba0551b",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 44,
                  "endLine": 85,
                  "endColumn": 47,
                  "charOffset": 2043,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2043,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2043,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-fed1e54f-7849-4823-b558-b249d3ac3968",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Index2Layer.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 8,
                  "endLine": 229,
                  "endColumn": 49,
                  "charOffset": 6001,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(&key01, code, storage.code_size_1)",
                    "rendered": {
                      "text": "memcpy(&key01, code, storage.code_size_1)",
                      "markdown": "`memcpy(&key01, code, storage.code_size_1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Index2Layer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6001,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&key01, <size of &key01>,  code,  storage.code_size_1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-68e69a98-dbc3-43fc-ac29-9d5a834e74ee",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Index2Layer.cpp"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 8,
                  "endLine": 183,
                  "endColumn": 47,
                  "charOffset": 4531,
                  "charLength": 39,
                  "snippet": {
                    "text": "memcpy(&key, code, storage.code_size_1)",
                    "rendered": {
                      "text": "memcpy(&key, code, storage.code_size_1)",
                      "markdown": "`memcpy(&key, code, storage.code_size_1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Index2Layer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4531,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&key, <size of &key>,  code,  storage.code_size_1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-95128e38-04a4-4e8b-8d3d-dc1c87d1cedc",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 28,
                  "endLine": 85,
                  "endColumn": 31,
                  "charOffset": 2027,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2027,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2027,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-f3602791-a025-473f-bc22-5f415595c508",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Index2Layer.cpp"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 8,
                  "endLine": 128,
                  "endColumn": 37,
                  "charOffset": 3111,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&key, rp, code_size_1)",
                    "rendered": {
                      "text": "memcpy(&key, rp, code_size_1)",
                      "markdown": "`memcpy(&key, rp, code_size_1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Index2Layer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3111,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&key, <size of &key>,  rp,  code_size_1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1cf0bb2f-39de-47ce-b8dd-d69801af704a",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 42,
                  "endLine": 83,
                  "endColumn": 45,
                  "charOffset": 1964,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1964,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1964,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-ba9fc656-861f-4785-a309-b64c86a88245",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 37,
                  "endLine": 81,
                  "endColumn": 40,
                  "charOffset": 1887,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1887,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1887,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-0303dfaa-b383-48b1-852d-9eedba5a2125",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 24,
                  "endLine": 76,
                  "endColumn": 27,
                  "charOffset": 1759,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1759,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1759,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-7aa479ec-c40e-4a8a-8e09-3fd32b808994",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 41,
                  "endLine": 79,
                  "endColumn": 44,
                  "charOffset": 1834,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1834,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1834,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-59b637cf-e74a-49d0-8449-eedd0cbc5d69",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 15,
                  "endLine": 40,
                  "endColumn": 18,
                  "charOffset": 942,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 942,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 942,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-2f7f660c-a66c-4066-b61d-fb9f3dd50f38",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 15,
                  "endLine": 38,
                  "endColumn": 18,
                  "charOffset": 897,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 897,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 897,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-cdcfeb1c-faca-43f0-ba1a-70eae17df9aa",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 15,
                  "endLine": 36,
                  "endColumn": 18,
                  "charOffset": 851,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 851,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 851,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-65c7088a-e8a8-41a7-8bff-b6e02f98520b",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 6,
                  "endLine": 34,
                  "endColumn": 9,
                  "charOffset": 821,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 821,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 821,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-77964857-12ad-4177-a84a-63ef360675cf",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 12,
                  "charOffset": 747,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 747,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 747,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-9279c503-7cb6-44b9-ab53-b9db48c2fb50",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/AlignedTable.h"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 12,
                  "endLine": 102,
                  "endColumn": 44,
                  "charOffset": 2191,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(ptr, other.ptr, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(ptr, other.ptr, sizeof(T)",
                      "markdown": "`memcpy(ptr, other.ptr, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/AlignedTable.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2191,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr, <size of ptr>,  other.ptr,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-74844278-cd70-4190-b5b2-716f6a246579",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/AlignedTable.h"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 16,
                  "endLine": 55,
                  "endColumn": 46,
                  "charOffset": 1245,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(new_ptr, ptr, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(new_ptr, ptr, sizeof(T)",
                      "markdown": "`memcpy(new_ptr, ptr, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/AlignedTable.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1245,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_ptr, <size of new_ptr>,  ptr,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0b68b011-6822-409a-90bd-105e96690908",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 51,
                  "endLine": 520,
                  "endColumn": 54,
                  "charOffset": 12949,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12949,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12949,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-e08fe9cf-e8f3-4faa-8207-d885a1316a5d",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 34,
                  "endLine": 520,
                  "endColumn": 37,
                  "charOffset": 12932,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12932,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12932,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-00230d86-4cb6-4b1b-9a64-90b88eecbe58",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 24,
                  "endLine": 517,
                  "endColumn": 27,
                  "charOffset": 12864,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12864,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12864,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-c06c806c-a361-4ca9-a763-b7f8b1d8e2b4",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 48,
                  "endLine": 441,
                  "endColumn": 51,
                  "charOffset": 11140,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11140,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11140,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-82544947-2a15-4de4-b3cd-6a2b2e3a4701",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 50,
                  "endLine": 439,
                  "endColumn": 53,
                  "charOffset": 11076,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11076,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11076,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-ae67ce0f-1d20-49de-b79e-7995b799c42c",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 33,
                  "endLine": 439,
                  "endColumn": 36,
                  "charOffset": 11059,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11059,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11059,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-aa8dcf79-5abe-4ac3-8ec5-7eaf2b57cdb8",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 23,
                  "endLine": 432,
                  "endColumn": 26,
                  "charOffset": 10930,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10930,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10930,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-6fceb93e-e783-4c89-a8c1-bc644305fb49",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/pq4_fast_scan.cpp"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 12,
                  "endLine": 283,
                  "endColumn": 22,
                  "charOffset": 8058,
                  "charLength": 116,
                  "snippet": {
                    "text": "memcpy(dest + (sq / 2 * nq + qi) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)",
                    "rendered": {
                      "text": "memcpy(dest + (sq / 2 * nq + qi) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)",
                      "markdown": "`memcpy(dest + (sq / 2 * nq + qi) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/pq4_fast_scan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8058,
                        "charLength": 116
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest + (sq / 2 * nq + qi) * 32 + 16, <size of dest + (sq / 2 * nq + qi) * 32 + 16>, \n                   src + (q * nsq + sq + 1) * 16, \n                   16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9bb1b11f-e18a-4a04-8193-309306a3818a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/pq4_fast_scan.cpp"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 12,
                  "endLine": 280,
                  "endColumn": 22,
                  "charOffset": 7937,
                  "charLength": 107,
                  "snippet": {
                    "text": "memcpy(dest + (sq / 2 * nq + qi) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)",
                    "rendered": {
                      "text": "memcpy(dest + (sq / 2 * nq + qi) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)",
                      "markdown": "`memcpy(dest + (sq / 2 * nq + qi) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/pq4_fast_scan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7937,
                        "charLength": 107
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest + (sq / 2 * nq + qi) * 32, <size of dest + (sq / 2 * nq + qi) * 32>, \n                   src + (q * nsq + sq) * 16, \n                   16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6ef19dd2-a8d9-44b4-affb-f99a6614aeff",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/pq4_fast_scan.cpp"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 12,
                  "endLine": 248,
                  "endColumn": 22,
                  "charOffset": 7182,
                  "charLength": 115,
                  "snippet": {
                    "text": "memcpy(dest + (sq / 2 * nq + q) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)",
                    "rendered": {
                      "text": "memcpy(dest + (sq / 2 * nq + q) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)",
                      "markdown": "`memcpy(dest + (sq / 2 * nq + q) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/pq4_fast_scan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7182,
                        "charLength": 115
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest + (sq / 2 * nq + q) * 32 + 16, <size of dest + (sq / 2 * nq + q) * 32 + 16>, \n                   src + (q * nsq + sq + 1) * 16, \n                   16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-08e417fa-3a16-49c8-890e-c6345fde2f2e",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 34,
                  "endLine": 343,
                  "endColumn": 37,
                  "charOffset": 8559,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8559,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8559,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-221a7fde-2ca1-46b9-9e79-a77a0cd70eb4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/pq4_fast_scan.cpp"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 12,
                  "endLine": 245,
                  "endColumn": 22,
                  "charOffset": 7062,
                  "charLength": 106,
                  "snippet": {
                    "text": "memcpy(dest + (sq / 2 * nq + q) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)",
                    "rendered": {
                      "text": "memcpy(dest + (sq / 2 * nq + q) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)",
                      "markdown": "`memcpy(dest + (sq / 2 * nq + q) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/pq4_fast_scan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7062,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest + (sq / 2 * nq + q) * 32, <size of dest + (sq / 2 * nq + q) * 32>, \n                   src + (q * nsq + sq) * 16, \n                   16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-13e3ccbe-65ee-4022-8657-b73ba614f9e0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexFlat.cpp"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 8,
                  "endLine": 179,
                  "endColumn": 38,
                  "charOffset": 5075,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(x, bytes, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(x, bytes, sizeof(float)",
                      "markdown": "`memcpy(x, bytes, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5075,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x, <size of x>,  bytes,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3f6ec5fa-684d-4c52-b4a4-f4eb291cd711",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexFlat.cpp"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 8,
                  "endLine": 173,
                  "endColumn": 38,
                  "charOffset": 4925,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(bytes, x, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(bytes, x, sizeof(float)",
                      "markdown": "`memcpy(bytes, x, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4925,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes, <size of bytes>,  x,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-55fd87d4-bc9a-4583-b83a-f6b3f6160544",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexFlat.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 4,
                  "endLine": 168,
                  "endColumn": 56,
                  "charOffset": 4768,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(recons, &(codes[key * code_size]), code_size)",
                    "rendered": {
                      "text": "memcpy(recons, &(codes[key * code_size]), code_size)",
                      "markdown": "`memcpy(recons, &(codes[key * code_size]), code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4768,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(recons, <size of recons>,  &(codes[key * code_size]),  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b0585ddf-0940-4f96-8f58-2af6d8d36e0d",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 47,
                  "endLine": 305,
                  "endColumn": 50,
                  "charOffset": 7663,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7663,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7663,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-7d071b2d-e815-489f-8eb3-fe69f6794442",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 33,
                  "endLine": 303,
                  "endColumn": 36,
                  "charOffset": 7583,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7583,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7583,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-35102e4f-0cb6-4ae8-9bad-c38119de467a",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 50,
                  "endLine": 303,
                  "endColumn": 53,
                  "charOffset": 7600,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7600,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7600,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-352bcce1-6df8-4beb-b9ae-e6467edf3786",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 23,
                  "endLine": 292,
                  "endColumn": 26,
                  "charOffset": 7397,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7397,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7397,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-73bf53f7-2bd9-4a0f-a1ea-8831bd22a254",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 35,
                  "endLine": 165,
                  "endColumn": 38,
                  "charOffset": 3937,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3937,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3937,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-2eca7a3b-4725-409d-b9a8-16518ee03481",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/lattice_Zn.cpp"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 12,
                  "endLine": 634,
                  "endColumn": 29,
                  "charOffset": 17273,
                  "charLength": 98,
                  "snippet": {
                    "text": "memcpy(c + i * subdim,\n                   &cache[codes[i] * subdim],\n                   sizeof(*c)",
                    "rendered": {
                      "text": "memcpy(c + i * subdim,\n                   &cache[codes[i] * subdim],\n                   sizeof(*c)",
                      "markdown": "`memcpy(c + i * subdim,\n                   &cache[codes[i] * subdim],\n                   sizeof(*c)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/lattice_Zn.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17273,
                        "charLength": 98
                      },
                      "insertedContent": {
                        "text": "memcpy_s(c + i * subdim, <size of c + i * subdim>, \n                   &cache[codes[i] * subdim], \n                   sizeof(*c)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-55a55882-db17-4b3c-b691-0cc84527dd96",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 35,
                  "endLine": 158,
                  "endColumn": 38,
                  "charOffset": 3715,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3715,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3715,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-db64a136-a329-4ec0-a76e-02f912aeda51",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/lattice_Zn.cpp"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 12,
                  "endLine": 539,
                  "endColumn": 44,
                  "charOffset": 14439,
                  "charLength": 115,
                  "snippet": {
                    "text": "memcpy(&cache[i * dimsub],\n                   c.data() + dim - dimsub,\n                   dimsub * sizeof(*c.data()",
                    "rendered": {
                      "text": "memcpy(&cache[i * dimsub],\n                   c.data() + dim - dimsub,\n                   dimsub * sizeof(*c.data()",
                      "markdown": "`memcpy(&cache[i * dimsub],\n                   c.data() + dim - dimsub,\n                   dimsub * sizeof(*c.data()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/lattice_Zn.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14439,
                        "charLength": 115
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&cache[i * dimsub], <size of &cache[i * dimsub]>, \n                   c.data() + dim - dimsub, \n                   dimsub * sizeof(*c.data()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8c02df18-9863-43ad-8579-df2ce5d43824",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 49,
                  "endLine": 76,
                  "endColumn": 52,
                  "charOffset": 1463,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1463,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1463,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-3424e7ac-8135-4065-b0ab-5b1c95ecbfc8",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 51,
                  "endLine": 74,
                  "endColumn": 54,
                  "charOffset": 1398,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1398,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1398,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-7265d263-004e-4bda-b0e8-f1a916eaf560",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 34,
                  "endLine": 74,
                  "endColumn": 37,
                  "charOffset": 1381,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1381,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1381,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-fc9d7b2e-6a9c-4cd9-ae47-3880bd968daf",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 24,
                  "endLine": 63,
                  "endColumn": 27,
                  "charOffset": 1190,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1190,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1190,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-5976bccd-a67b-49fe-8970-1b2cb5090aa6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 27,
                  "charOffset": 700,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(u8, ptr, 32)",
                    "rendered": {
                      "text": "memcpy(u8, ptr, 32)",
                      "markdown": "`memcpy(u8, ptr, 32)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 700,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(u8, <size of u8>,  ptr,  32)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a624fda9-91c9-49df-83d3-c46f3126d64d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8,
                  "endLine": 28,
                  "endColumn": 25,
                  "charOffset": 508,
                  "charLength": 17,
                  "snippet": {
                    "text": "memcpy(u8, x, 32)",
                    "rendered": {
                      "text": "memcpy(u8, x, 32)",
                      "markdown": "`memcpy(u8, x, 32)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 508,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "memcpy_s(u8, <size of u8>,  x,  32)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ff47668a-03b6-4b97-95d1-66a97d980a39",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 27,
                  "charOffset": 630,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(ptr, u8, 32)",
                    "rendered": {
                      "text": "memcpy(ptr, u8, 32)",
                      "markdown": "`memcpy(ptr, u8, 32)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 630,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr, <size of ptr>,  u8,  32)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5203392b-652e-4933-abbb-b659fd01a2e4",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "endLine": 27,
                  "endColumn": 18,
                  "charOffset": 474,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 474,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 474,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-2d8e3e58-ba16-4e82-88ea-d1356891bade",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 6,
                  "endLine": 25,
                  "endColumn": 9,
                  "charOffset": 444,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 444,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 444,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-daa7b8f5-44dc-4f3c-aa34-e69322bf5ae4",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "endLine": 17,
                  "endColumn": 12,
                  "charOffset": 310,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 310,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 310,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-fa5ec745-46e4-434c-9dc6-75525bec7c87",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IVFlib.cpp"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 4,
                  "endLine": 187,
                  "endColumn": 60,
                  "charOffset": 5802,
                  "charLength": 56,
                  "snippet": {
                    "text": "memcpy(dst.data() + insert_point, src.data(), src.size()",
                    "rendered": {
                      "text": "memcpy(dst.data() + insert_point, src.data(), src.size()",
                      "markdown": "`memcpy(dst.data() + insert_point, src.data(), src.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IVFlib.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5802,
                        "charLength": 56
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst.data() + insert_point, <size of dst.data() + insert_point>,  src.data(),  src.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-26e96fa7-abd0-4797-9b49-c4739133a073",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ScalarQuantizer.cpp"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 8,
                  "endLine": 577,
                  "endColumn": 34,
                  "charOffset": 17333,
                  "charLength": 26,
                  "snippet": {
                    "text": "memcpy(vmax, x, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(vmax, x, sizeof(*x)",
                      "markdown": "`memcpy(vmax, x, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ScalarQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17333,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "memcpy_s(vmax, <size of vmax>,  x,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c8368ffa-a584-437a-8b20-48ed2099d746",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ScalarQuantizer.cpp"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 8,
                  "endLine": 576,
                  "endColumn": 34,
                  "charOffset": 17292,
                  "charLength": 26,
                  "snippet": {
                    "text": "memcpy(vmin, x, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(vmin, x, sizeof(*x)",
                      "markdown": "`memcpy(vmin, x, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ScalarQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17292,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "memcpy_s(vmin, <size of vmin>,  x,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d0992b4c-4332-4923-951f-2f3d93263c9f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ScalarQuantizer.cpp"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 8,
                  "endLine": 488,
                  "endColumn": 47,
                  "charOffset": 14897,
                  "charLength": 39,
                  "snippet": {
                    "text": "memcpy(x_copy.data(), x, n * sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(x_copy.data(), x, n * sizeof(*x)",
                      "markdown": "`memcpy(x_copy.data(), x, n * sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ScalarQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14897,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x_copy.data(), <size of x_copy.data()>,  x,  n * sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4531c16d-2daa-4086-8080-647458871c59",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/utils.cpp"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 8,
                  "endLine": 457,
                  "endColumn": 72,
                  "charOffset": 11147,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(&x_subset[i * d], &x[subset[i] * size_t(d)], sizeof(x[0])",
                    "rendered": {
                      "text": "memcpy(&x_subset[i * d], &x[subset[i] * size_t(d)], sizeof(x[0])",
                      "markdown": "`memcpy(&x_subset[i * d], &x[subset[i] * size_t(d)], sizeof(x[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/utils.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11147,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&x_subset[i * d], <size of &x_subset[i * d]>,  &x[subset[i] * size_t(d)],  sizeof(x[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8efa1d8c-4399-4877-9608-8685373dfdf2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/utils.cpp"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 4,
                  "endLine": 339,
                  "endColumn": 37,
                  "charOffset": 8143,
                  "charLength": 33,
                  "snippet": {
                    "text": "memcpy(v2, v2_in, sizeof(int64_t)",
                    "rendered": {
                      "text": "memcpy(v2, v2_in, sizeof(int64_t)",
                      "markdown": "`memcpy(v2, v2_in, sizeof(int64_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/utils.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8143,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "memcpy_s(v2, <size of v2>,  v2_in,  sizeof(int64_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6324c837-c10a-4dd2-b44c-ca7be1f20b3a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/utils.cpp"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 12,
                  "endLine": 324,
                  "endColumn": 51,
                  "charOffset": 7812,
                  "charLength": 39,
                  "snippet": {
                    "text": "memcpy(lI0, tmpI.data(), sizeof(lI0[0])",
                    "rendered": {
                      "text": "memcpy(lI0, tmpI.data(), sizeof(lI0[0])",
                      "markdown": "`memcpy(lI0, tmpI.data(), sizeof(lI0[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/utils.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7812,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "memcpy_s(lI0, <size of lI0>,  tmpI.data(),  sizeof(lI0[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-888c0144-276d-4e93-ab2b-cbf2dbae5774",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/utils.cpp"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 12,
                  "endLine": 323,
                  "endColumn": 51,
                  "charOffset": 7754,
                  "charLength": 39,
                  "snippet": {
                    "text": "memcpy(lD0, tmpD.data(), sizeof(lD0[0])",
                    "rendered": {
                      "text": "memcpy(lD0, tmpD.data(), sizeof(lD0[0])",
                      "markdown": "`memcpy(lD0, tmpD.data(), sizeof(lD0[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/utils.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7754,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "memcpy_s(lD0, <size of lD0>,  tmpD.data(),  sizeof(lD0[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1d74bbdb-aa81-404d-a083-fb16a174a4a0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 12,
                  "endLine": 386,
                  "endColumn": 63,
                  "charOffset": 11610,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(dis1 + j0, dis2.data() + j0, sizeof(dis2[0])",
                    "rendered": {
                      "text": "memcpy(dis1 + j0, dis2.data() + j0, sizeof(dis2[0])",
                      "markdown": "`memcpy(dis1 + j0, dis2.data() + j0, sizeof(dis2[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11610,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dis1 + j0, <size of dis1 + j0>,  dis2.data() + j0,  sizeof(dis2[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-93ab8f59-372e-4a8f-a8ac-89d1adbc1e57",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 12,
                  "endLine": 385,
                  "endColumn": 37,
                  "charOffset": 11486,
                  "charLength": 98,
                  "snippet": {
                    "text": "memcpy(labels1 + j0,\n                   labels2.data() + j0,\n                   sizeof(labels1[0])",
                    "rendered": {
                      "text": "memcpy(labels1 + j0,\n                   labels2.data() + j0,\n                   sizeof(labels1[0])",
                      "markdown": "`memcpy(labels1 + j0,\n                   labels2.data() + j0,\n                   sizeof(labels1[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11486,
                        "charLength": 98
                      },
                      "insertedContent": {
                        "text": "memcpy_s(labels1 + j0, <size of labels1 + j0>, \n                   labels2.data() + j0, \n                   sizeof(labels1[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-100ffaaa-6544-4f5f-a5de-a9425ca16729",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 12,
                  "endLine": 254,
                  "endColumn": 59,
                  "charOffset": 7549,
                  "charLength": 47,
                  "snippet": {
                    "text": "memcpy(x2.get() + n2 * d, x + i * d, code_size)",
                    "rendered": {
                      "text": "memcpy(x2.get() + n2 * d, x + i * d, code_size)",
                      "markdown": "`memcpy(x2.get() + n2 * d, x + i * d, code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7549,
                        "charLength": 47
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x2.get() + n2 * d, <size of x2.get() + n2 * d>,  x + i * d,  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fbcc03b5-a5c2-468c-8f32-d4f23ec3a5ae",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 4,
                  "endLine": 228,
                  "endColumn": 61,
                  "charOffset": 6676,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(recons, invlists->get_single_code(list_no, offset)",
                    "rendered": {
                      "text": "memcpy(recons, invlists->get_single_code(list_no, offset)",
                      "markdown": "`memcpy(recons, invlists->get_single_code(list_no, offset)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6676,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(recons, <size of recons>,  invlists->get_single_code(list_no,  offset)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e11005ab-75b0-4917-aebc-a30adb8303a5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 8,
                  "endLine": 115,
                  "endColumn": 49,
                  "charOffset": 3146,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(xi, code + coarse_size, code_size)",
                    "rendered": {
                      "text": "memcpy(xi, code + coarse_size, code_size)",
                      "markdown": "`memcpy(xi, code + coarse_size, code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3146,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  code + coarse_size,  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-223dcec7-0de3-4701-8879-6793afa9d803",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 16,
                  "endLine": 102,
                  "endColumn": 57,
                  "charOffset": 2723,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(code + coarse_size, xi, code_size)",
                    "rendered": {
                      "text": "memcpy(code + coarse_size, xi, code_size)",
                      "markdown": "`memcpy(code + coarse_size, xi, code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2723,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(code + coarse_size, <size of code + coarse_size>,  xi,  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-055ceded-2bad-4a3c-a4be-c78c30bcd5fb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 8,
                  "endLine": 93,
                  "endColumn": 39,
                  "charOffset": 2342,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(codes, x, code_size * n)",
                    "rendered": {
                      "text": "memcpy(codes, x, code_size * n)",
                      "markdown": "`memcpy(codes, x, code_size * n)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2342,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(codes, <size of codes>,  x,  code_size * n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6b8e6acb-3155-4162-b88c-3f2b33a5f224",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexAdditiveQuantizerFastScan.cpp"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 12,
                  "endLine": 182,
                  "endColumn": 59,
                  "charOffset": 5299,
                  "charLength": 47,
                  "snippet": {
                    "text": "memcpy(lut, norm_lut, norm_dim12 * sizeof(*lut)",
                    "rendered": {
                      "text": "memcpy(lut, norm_lut, norm_dim12 * sizeof(*lut)",
                      "markdown": "`memcpy(lut, norm_lut, norm_dim12 * sizeof(*lut)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexAdditiveQuantizerFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5299,
                        "charLength": 47
                      },
                      "insertedContent": {
                        "text": "memcpy_s(lut, <size of lut>,  norm_lut,  norm_dim12 * sizeof(*lut)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a4d65bf5-bb5a-4da3-9639-58633d21eb5f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexAdditiveQuantizerFastScan.cpp"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 12,
                  "endLine": 180,
                  "endColumn": 77,
                  "charOffset": 5190,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(lut, ip_lut.data() + i * ip_dim12, ip_dim12 * sizeof(*lut)",
                    "rendered": {
                      "text": "memcpy(lut, ip_lut.data() + i * ip_dim12, ip_dim12 * sizeof(*lut)",
                      "markdown": "`memcpy(lut, ip_lut.data() + i * ip_dim12, ip_dim12 * sizeof(*lut)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexAdditiveQuantizerFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5190,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(lut, <size of lut>,  ip_lut.data() + i * ip_dim12,  ip_dim12 * sizeof(*lut)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f55c12d0-b666-4b8d-9eb0-b77f18f50b9b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/index_read.cpp"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 16,
                  "endLine": 750,
                  "endColumn": 77,
                  "charOffset": 24070,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(ail->codes[i].data(), vec.data(), ail->codes[i].size()",
                    "rendered": {
                      "text": "memcpy(ail->codes[i].data(), vec.data(), ail->codes[i].size()",
                      "markdown": "`memcpy(ail->codes[i].data(), vec.data(), ail->codes[i].size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/index_read.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24070,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ail->codes[i].data(), <size of ail->codes[i].data()>,  vec.data(),  ail->codes[i].size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9a80032d-1bfa-4a48-8f5b-5735fb7e7710",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/python/python_callbacks.cpp"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 49,
                  "charOffset": 2603,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(ptr, PyBytes_AsString(result), sz)",
                    "rendered": {
                      "text": "memcpy(ptr, PyBytes_AsString(result), sz)",
                      "markdown": "`memcpy(ptr, PyBytes_AsString(result), sz)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/python/python_callbacks.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2603,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr, <size of ptr>,  PyBytes_AsString(result),  sz)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a1819b93-c9bd-43d7-96b8-b72e3f9b6e51",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 1511,
                  "startColumn": 8,
                  "endLine": 1513,
                  "endColumn": 54,
                  "charOffset": 48723,
                  "charLength": 106,
                  "snippet": {
                    "text": "memcpy(out_distances,\n               distances_ptr,\n               distances_size * sizeof(*distances_ptr)",
                    "rendered": {
                      "text": "memcpy(out_distances,\n               distances_ptr,\n               distances_size * sizeof(*distances_ptr)",
                      "markdown": "`memcpy(out_distances,\n               distances_ptr,\n               distances_size * sizeof(*distances_ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 48723,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_distances, <size of out_distances>, \n               distances_ptr, \n               distances_size * sizeof(*distances_ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-33650d16-25da-4374-b335-c8450d67d128",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 1505,
                  "startColumn": 8,
                  "endLine": 1505,
                  "endColumn": 68,
                  "charOffset": 48492,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)",
                    "rendered": {
                      "text": "memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)",
                      "markdown": "`memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 48492,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_codes, <size of out_codes>,  codes_ptr,  codes_size * sizeof(*codes_ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-963189b8-e4b8-4776-a231-fcbf296dd806",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 1385,
                  "startColumn": 16,
                  "endLine": 1385,
                  "endColumn": 68,
                  "charOffset": 44706,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                    "rendered": {
                      "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                      "markdown": "`memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 44706,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_codes_i, <size of new_codes_i>,  codes_i + js * m,  sizeof(*codes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4b38a5c4-111b-4174-a166-a5b1265e0c94",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 8,
                  "endLine": 934,
                  "endColumn": 57,
                  "charOffset": 29070,
                  "charLength": 117,
                  "snippet": {
                    "text": "memcpy(out_distances,\n               pool.distances.data(),\n               distances_size * sizeof(pool.distances[0])",
                    "rendered": {
                      "text": "memcpy(out_distances,\n               pool.distances.data(),\n               distances_size * sizeof(pool.distances[0])",
                      "markdown": "`memcpy(out_distances,\n               pool.distances.data(),\n               distances_size * sizeof(pool.distances[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29070,
                        "charLength": 117
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_distances, <size of out_distances>, \n               pool.distances.data(), \n               distances_size * sizeof(pool.distances[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-afc2e459-0127-47b0-9d99-a30e8ff724cf",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 8,
                  "endLine": 926,
                  "endColumn": 54,
                  "charOffset": 28793,
                  "charLength": 106,
                  "snippet": {
                    "text": "memcpy(out_residuals,\n               residuals_ptr,\n               residuals_size * sizeof(*residuals_ptr)",
                    "rendered": {
                      "text": "memcpy(out_residuals,\n               residuals_ptr,\n               residuals_size * sizeof(*residuals_ptr)",
                      "markdown": "`memcpy(out_residuals,\n               residuals_ptr,\n               residuals_size * sizeof(*residuals_ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28793,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_residuals, <size of out_residuals>, \n               residuals_ptr, \n               residuals_size * sizeof(*residuals_ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8c674b51-675d-41f0-81b0-79db6fc61666",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 918,
                  "startColumn": 8,
                  "endLine": 918,
                  "endColumn": 68,
                  "charOffset": 28562,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)",
                    "rendered": {
                      "text": "memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)",
                      "markdown": "`memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28562,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_codes, <size of out_codes>,  codes_ptr,  codes_size * sizeof(*codes_ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c0829ab8-7242-4885-8645-a20ebe376822",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 8,
                  "endLine": 347,
                  "endColumn": 31,
                  "charOffset": 11121,
                  "charLength": 121,
                  "snippet": {
                    "text": "memcpy(this->codebooks.data() + codebook_offsets[m] * d,\n               codebooks.data(),\n               codebooks.size()",
                    "rendered": {
                      "text": "memcpy(this->codebooks.data() + codebook_offsets[m] * d,\n               codebooks.data(),\n               codebooks.size()",
                      "markdown": "`memcpy(this->codebooks.data() + codebook_offsets[m] * d,\n               codebooks.data(),\n               codebooks.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11121,
                        "charLength": 121
                      },
                      "insertedContent": {
                        "text": "memcpy_s(this->codebooks.data() + codebook_offsets[m] * d, <size of this->codebooks.data() + codebook_offsets[m] * d>, \n               codebooks.data(), \n               codebooks.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ec6a8977-9225-4599-9af0-448cf213480d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 16,
                  "endLine": 308,
                  "endColumn": 43,
                  "charOffset": 9668,
                  "charLength": 142,
                  "snippet": {
                    "text": "memcpy(residuals1.data() + j * d,\n                       residuals.data() + j * d * cur_beam_size,\n                       sizeof(residuals[0])",
                    "rendered": {
                      "text": "memcpy(residuals1.data() + j * d,\n                       residuals.data() + j * d * cur_beam_size,\n                       sizeof(residuals[0])",
                      "markdown": "`memcpy(residuals1.data() + j * d,\n                       residuals.data() + j * d * cur_beam_size,\n                       sizeof(residuals[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9668,
                        "charLength": 142
                      },
                      "insertedContent": {
                        "text": "memcpy_s(residuals1.data() + j * d, <size of residuals1.data() + j * d>, \n                       residuals.data() + j * d * cur_beam_size, \n                       sizeof(residuals[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7ec0f674-fa61-4840-a848-9636b3dd8fda",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 20,
                  "endLine": 265,
                  "endColumn": 72,
                  "charOffset": 8434,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                    "rendered": {
                      "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                      "markdown": "`memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8434,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_codes_i, <size of new_codes_i>,  codes_i + js * m,  sizeof(*codes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f14acfbb-5898-40c9-aad5-627ca08d9cd6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 20,
                  "endLine": 211,
                  "endColumn": 72,
                  "charOffset": 6304,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                    "rendered": {
                      "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                      "markdown": "`memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6304,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_codes_i, <size of new_codes_i>,  codes_i + js * m,  sizeof(*codes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c0567791-7d69-4575-a4da-b29d36587c69",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 8,
                  "endLine": 123,
                  "endColumn": 31,
                  "charOffset": 2857,
                  "charLength": 132,
                  "snippet": {
                    "text": "memcpy(codebooks.data(),\n               other.codebooks.data() + other.codebook_offsets[skip_M] * d,\n               codebooks.size()",
                    "rendered": {
                      "text": "memcpy(codebooks.data(),\n               other.codebooks.data() + other.codebook_offsets[skip_M] * d,\n               codebooks.size()",
                      "markdown": "`memcpy(codebooks.data(),\n               other.codebooks.data() + other.codebook_offsets[skip_M] * d,\n               codebooks.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2857,
                        "charLength": 132
                      },
                      "insertedContent": {
                        "text": "memcpy_s(codebooks.data(), <size of codebooks.data()>, \n               other.codebooks.data() + other.codebook_offsets[skip_M] * d, \n               codebooks.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6e4d15d0-2fb7-4a53-b495-c565beb9ac53",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 24,
                  "charOffset": 1070,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.netlib.org",
                    "rendered": {
                      "text": "http://www.netlib.org",
                      "markdown": "`http://www.netlib.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1070,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.netlib.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-a3eeb146-dbb7-4145-a896-46bbbfac2c34",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 4,
                  "endLine": 113,
                  "endColumn": 23,
                  "charOffset": 2518,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(nbits.data(),\n           other.nbits.data() + skip_M,\n           nbits.size()",
                    "rendered": {
                      "text": "memcpy(nbits.data(),\n           other.nbits.data() + skip_M,\n           nbits.size()",
                      "markdown": "`memcpy(nbits.data(),\n           other.nbits.data() + skip_M,\n           nbits.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2518,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(nbits.data(), <size of nbits.data()>, \n           other.nbits.data() + skip_M, \n           nbits.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2ddc7795-73c8-4b42-bebf-0bf55cee82ed",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexPQ.cpp"
                },
                "region": {
                  "startLine": 1069,
                  "startColumn": 12,
                  "endLine": 1069,
                  "endColumn": 55,
                  "charOffset": 30730,
                  "charLength": 43,
                  "snippet": {
                    "text": "memcpy(xdest, xsrc, dsub * sizeof(xdest[0])",
                    "rendered": {
                      "text": "memcpy(xdest, xsrc, dsub * sizeof(xdest[0])",
                      "markdown": "`memcpy(xdest, xsrc, dsub * sizeof(xdest[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexPQ.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30730,
                        "charLength": 43
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xdest, <size of xdest>,  xsrc,  dsub * sizeof(xdest[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6cfc48e1-64e5-4159-8afc-13374311f10f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexPQ.cpp"
                },
                "region": {
                  "startLine": 980,
                  "startColumn": 8,
                  "endLine": 980,
                  "endColumn": 45,
                  "charOffset": 28240,
                  "charLength": 37,
                  "snippet": {
                    "text": "memcpy(recons, pq.get_centroids(m, n)",
                    "rendered": {
                      "text": "memcpy(recons, pq.get_centroids(m, n)",
                      "markdown": "`memcpy(recons, pq.get_centroids(m, n)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexPQ.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28240,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "memcpy_s(recons, <size of recons>,  pq.get_centroids(m,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ee3579c4-0b82-4d89-b08c-7518809c0e6b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/NSG.h"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 8,
                  "endLine": 74,
                  "endColumn": 51,
                  "charOffset": 2012,
                  "charLength": 43,
                  "snippet": {
                    "text": "memcpy(data, g.data, N * K * sizeof(node_t)",
                    "rendered": {
                      "text": "memcpy(data, g.data, N * K * sizeof(node_t)",
                      "markdown": "`memcpy(data, g.data, N * K * sizeof(node_t)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/NSG.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2012,
                        "charLength": 43
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data, <size of data>,  g.data,  N * K * sizeof(node_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-986e274a-3181-4f9d-86eb-177a8ee475a6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexRowwiseMinMax.cpp"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 17,
                  "endLine": 184,
                  "endColumn": 34,
                  "charOffset": 5258,
                  "charLength": 175,
                  "snippet": {
                    "text": "memcpy(\n                    tmp.data() + i * old_code_size,\n                    bytes + i * new_code_size + (new_code_size - old_code_size),\n                    old_code_size)",
                    "rendered": {
                      "text": "memcpy(\n                    tmp.data() + i * old_code_size,\n                    bytes + i * new_code_size + (new_code_size - old_code_size),\n                    old_code_size)",
                      "markdown": "`memcpy(\n                    tmp.data() + i * old_code_size,\n                    bytes + i * new_code_size + (new_code_size - old_code_size),\n                    old_code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexRowwiseMinMax.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5258,
                        "charLength": 175
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n                    tmp.data() + i * old_code_size, <size of \n                    tmp.data() + i * old_code_size>, \n                    bytes + i * new_code_size + (new_code_size - old_code_size), \n                    old_code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-302cf6d0-7a1e-42ac-8bf6-103c68f21376",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 28,
                  "endLine": 230,
                  "endColumn": 38,
                  "charOffset": 6047,
                  "charLength": 10,
                  "snippet": {
                    "text": "strlen(sx)",
                    "rendered": {
                      "text": "strlen(sx)",
                      "markdown": "`strlen(sx)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6047,
                        "charLength": 10
                      },
                      "insertedContent": {
                        "text": "strlen_s(sx, <size of sx>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6047,
                        "charLength": 10
                      },
                      "insertedContent": {
                        "text": "strnlen(sx, <size of sx>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e2120b9d-a258-4611-b2dd-f494557971ec",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 8,
                  "endLine": 209,
                  "endColumn": 39,
                  "charOffset": 5537,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(buffer.data(), src, nb1)",
                    "rendered": {
                      "text": "memcpy(buffer.data(), src, nb1)",
                      "markdown": "`memcpy(buffer.data(), src, nb1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5537,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer.data(), <size of buffer.data()>,  src,  nb1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-20126071-a474-4de2-bcbe-c24b9d1b0fbc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 8,
                  "endLine": 191,
                  "endColumn": 43,
                  "charOffset": 5005,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(buffer.data() + b0, src, nb)",
                    "rendered": {
                      "text": "memcpy(buffer.data() + b0, src, nb)",
                      "markdown": "`memcpy(buffer.data() + b0, src, nb)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5005,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer.data() + b0, <size of buffer.data() + b0>,  src,  nb)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7d73affb-0adb-482e-b231-8e42aab2cf65",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 8,
                  "endLine": 166,
                  "endColumn": 39,
                  "charOffset": 4371,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(dst, buffer.data(), nb2)",
                    "rendered": {
                      "text": "memcpy(dst, buffer.data(), nb2)",
                      "markdown": "`memcpy(dst, buffer.data(), nb2)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4371,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  buffer.data(),  nb2)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-700a1057-a7b6-4ad7-aa39-8f1fe41c906f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 8,
                  "endLine": 145,
                  "endColumn": 43,
                  "charOffset": 3855,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(dst, buffer.data() + b0, nb)",
                    "rendered": {
                      "text": "memcpy(dst, buffer.data() + b0, nb)",
                      "markdown": "`memcpy(dst, buffer.data() + b0, nb)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3855,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  buffer.data() + b0,  nb)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b3599703-3a59-43c0-9fb2-e9f93c8b9244",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 8,
                  "endLine": 52,
                  "endColumn": 45,
                  "charOffset": 1391,
                  "charLength": 37,
                  "snippet": {
                    "text": "memcpy(ptr, &data[rp], size * nitems)",
                    "rendered": {
                      "text": "memcpy(ptr, &data[rp], size * nitems)",
                      "markdown": "`memcpy(ptr, &data[rp], size * nitems)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1391,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr, <size of ptr>,  &data[rp],  size * nitems)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-292d4056-c48f-4e68-b1d7-3e3c954ee7b5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 44,
                  "charOffset": 1068,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(&data[o], ptr, size * nitems)",
                    "rendered": {
                      "text": "memcpy(&data[o], ptr, size * nitems)",
                      "markdown": "`memcpy(&data[o], ptr, size * nitems)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1068,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&data[o], <size of &data[o]>,  ptr,  size * nitems)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-234cfcb9-f4ac-4c9d-8fed-2253d0ac6927",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFPQ.cpp"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 16,
                  "endLine": 500,
                  "endColumn": 46,
                  "charOffset": 15154,
                  "charLength": 94,
                  "snippet": {
                    "text": "memcpy(centroids.data() + i * d + m * cpq.dsub,\n                       cpq.get_centroids(m, i)",
                    "rendered": {
                      "text": "memcpy(centroids.data() + i * d + m * cpq.dsub,\n                       cpq.get_centroids(m, i)",
                      "markdown": "`memcpy(centroids.data() + i * d + m * cpq.dsub,\n                       cpq.get_centroids(m, i)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFPQ.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15154,
                        "charLength": 94
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids.data() + i * d + m * cpq.dsub, <size of centroids.data() + i * d + m * cpq.dsub>, \n                       cpq.get_centroids(m,  i)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d7157e4c-b8c8-42b1-b959-240b840fbe67",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/kmeans1d.cpp"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 8,
                  "endLine": 197,
                  "endColumn": 43,
                  "charOffset": 5261,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(centroids, x, n * sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(centroids, x, n * sizeof(*x)",
                      "markdown": "`memcpy(centroids, x, n * sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/kmeans1d.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5261,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids, <size of centroids>,  x,  n * sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9889aae0-0755-4839-b695-022f0f218e81",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/LocalSearchQuantizer.cpp"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 8,
                  "endLine": 579,
                  "endColumn": 56,
                  "charOffset": 16351,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(codes, best_codes.data(), sizeof(int32_t)",
                    "rendered": {
                      "text": "memcpy(codes, best_codes.data(), sizeof(int32_t)",
                      "markdown": "`memcpy(codes, best_codes.data(), sizeof(int32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/LocalSearchQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16351,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(codes, <size of codes>,  best_codes.data(),  sizeof(int32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3e1a4fe3-2db4-4321-84ad-d17329b36a4e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/LocalSearchQuantizer.cpp"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 16,
                  "endLine": 572,
                  "endColumn": 38,
                  "charOffset": 16108,
                  "charLength": 110,
                  "snippet": {
                    "text": "memcpy(best_codes.data() + i * M,\n                       codes + i * M,\n                       sizeof(int32_t)",
                    "rendered": {
                      "text": "memcpy(best_codes.data() + i * M,\n                       codes + i * M,\n                       sizeof(int32_t)",
                      "markdown": "`memcpy(best_codes.data() + i * M,\n                       codes + i * M,\n                       sizeof(int32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/LocalSearchQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16108,
                        "charLength": 110
                      },
                      "insertedContent": {
                        "text": "memcpy_s(best_codes.data() + i * M, <size of best_codes.data() + i * M>, \n                       codes + i * M, \n                       sizeof(int32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3b250ad5-2de4-4e93-ab32-df8d326aa62b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 8,
                  "endLine": 578,
                  "endColumn": 39,
                  "charOffset": 19050,
                  "charLength": 119,
                  "snippet": {
                    "text": "memcpy(distances + i * k,\n               beam_distances.data() + beam_size * i,\n               k * sizeof(distances[0])",
                    "rendered": {
                      "text": "memcpy(distances + i * k,\n               beam_distances.data() + beam_size * i,\n               k * sizeof(distances[0])",
                      "markdown": "`memcpy(distances + i * k,\n               beam_distances.data() + beam_size * i,\n               k * sizeof(distances[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19050,
                        "charLength": 119
                      },
                      "insertedContent": {
                        "text": "memcpy_s(distances + i * k, <size of distances + i * k>, \n               beam_distances.data() + beam_size * i, \n               k * sizeof(distances[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1b162663-d8d7-41f5-bf3e-4322bb10e051",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductQuantizer.cpp"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 16,
                  "endLine": 356,
                  "endColumn": 43,
                  "charOffset": 10541,
                  "charLength": 121,
                  "snippet": {
                    "text": "memcpy(xslice + (i - i0) * dsub,\n                       x + i * d + m * dsub,\n                       dsub * sizeof(float)",
                    "rendered": {
                      "text": "memcpy(xslice + (i - i0) * dsub,\n                       x + i * d + m * dsub,\n                       dsub * sizeof(float)",
                      "markdown": "`memcpy(xslice + (i - i0) * dsub,\n                       x + i * d + m * dsub,\n                       dsub * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10541,
                        "charLength": 121
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xslice + (i - i0) * dsub, <size of xslice + (i - i0) * dsub>, \n                       x + i * d + m * dsub, \n                       dsub * sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d5b60089-60a5-47c3-90b5-e51e2124b913",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductQuantizer.cpp"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 8,
                  "endLine": 287,
                  "endColumn": 37,
                  "charOffset": 8690,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(x + m * pq.dsub,\n               pq.get_centroids(m, c)",
                    "rendered": {
                      "text": "memcpy(x + m * pq.dsub,\n               pq.get_centroids(m, c)",
                      "markdown": "`memcpy(x + m * pq.dsub,\n               pq.get_centroids(m, c)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8690,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x + m * pq.dsub, <size of x + m * pq.dsub>, \n               pq.get_centroids(m,  c)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-85cb3f6b-aea5-4232-bdda-b32fced6418a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductQuantizer.cpp"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 20,
                  "endLine": 164,
                  "endColumn": 46,
                  "charOffset": 4588,
                  "charLength": 76,
                  "snippet": {
                    "text": "memcpy(clus.centroids.data(),\n                           get_centroids(m, 0)",
                    "rendered": {
                      "text": "memcpy(clus.centroids.data(),\n                           get_centroids(m, 0)",
                      "markdown": "`memcpy(clus.centroids.data(),\n                           get_centroids(m, 0)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4588,
                        "charLength": 76
                      },
                      "insertedContent": {
                        "text": "memcpy_s(clus.centroids.data(), <size of clus.centroids.data()>, \n                           get_centroids(m,  0)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b8c213ff-fc02-482b-9a99-2a2a2a8c5222",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductQuantizer.cpp"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 16,
                  "endLine": 144,
                  "endColumn": 43,
                  "charOffset": 3783,
                  "charLength": 114,
                  "snippet": {
                    "text": "memcpy(xslice + j * dsub,\n                       x + j * d + m * dsub,\n                       dsub * sizeof(float)",
                    "rendered": {
                      "text": "memcpy(xslice + j * dsub,\n                       x + j * d + m * dsub,\n                       dsub * sizeof(float)",
                      "markdown": "`memcpy(xslice + j * dsub,\n                       x + j * d + m * dsub,\n                       dsub * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3783,
                        "charLength": 114
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xslice + j * dsub, <size of xslice + j * dsub>, \n                       x + j * d + m * dsub, \n                       dsub * sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-29db3f77-d563-4eb0-954e-99bc1867f923",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 4,
                  "endLine": 648,
                  "endColumn": 50,
                  "charOffset": 17839,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(new_lists.data(), &lists[l0], (l1 - l0)",
                    "rendered": {
                      "text": "memcpy(new_lists.data(), &lists[l0], (l1 - l0)",
                      "markdown": "`memcpy(new_lists.data(), &lists[l0], (l1 - l0)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17839,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_lists.data(), <size of new_lists.data()>,  &lists[l0],  (l1 - l0)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-36c8e8fd-b63c-44ca-8c4a-b7e91fdcae12",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 12,
                  "endLine": 473,
                  "endColumn": 36,
                  "charOffset": 13270,
                  "charLength": 129,
                  "snippet": {
                    "text": "memcpy(ptr + new_l.offset + new_l.capacity * code_size,\n                   get_ids(list_no),\n                   n * sizeof(idx_t)",
                    "rendered": {
                      "text": "memcpy(ptr + new_l.offset + new_l.capacity * code_size,\n                   get_ids(list_no),\n                   n * sizeof(idx_t)",
                      "markdown": "`memcpy(ptr + new_l.offset + new_l.capacity * code_size,\n                   get_ids(list_no),\n                   n * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13270,
                        "charLength": 129
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr + new_l.offset + new_l.capacity * code_size, <size of ptr + new_l.offset + new_l.capacity * code_size>, \n                   get_ids(list_no), \n                   n * sizeof(idx_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bdc95ece-6ac7-424e-a39b-1782408fe1b9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 12,
                  "endLine": 470,
                  "endColumn": 73,
                  "charOffset": 13195,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(ptr + new_l.offset, get_codes(list_no), n * code_size)",
                    "rendered": {
                      "text": "memcpy(ptr + new_l.offset, get_codes(list_no), n * code_size)",
                      "markdown": "`memcpy(ptr + new_l.offset, get_codes(list_no), n * code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13195,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr + new_l.offset, <size of ptr + new_l.offset>,  get_codes(list_no),  n * code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-af1f2f6b-0fc5-41d3-a482-2933d1ea5251",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 4,
                  "endLine": 415,
                  "endColumn": 69,
                  "charOffset": 11721,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(codes + offset * code_size, codes_in, code_size * n_entry)",
                    "rendered": {
                      "text": "memcpy(codes + offset * code_size, codes_in, code_size * n_entry)",
                      "markdown": "`memcpy(codes + offset * code_size, codes_in, code_size * n_entry)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11721,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(codes + offset * code_size, <size of codes + offset * code_size>,  codes_in,  code_size * n_entry)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9799e3ff-74f5-4d0b-8b7b-2e61e3e2a414",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 4,
                  "endLine": 413,
                  "endColumn": 50,
                  "charOffset": 11595,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(ids + offset, ids_in, sizeof(ids_in[0])",
                    "rendered": {
                      "text": "memcpy(ids + offset, ids_in, sizeof(ids_in[0])",
                      "markdown": "`memcpy(ids + offset, ids_in, sizeof(ids_in[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11595,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ids + offset, <size of ids + offset>,  ids_in,  sizeof(ids_in[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ae2c15cb-c654-480b-8c20-b9250eea1131",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AuxIndexStructures.cpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 8,
                  "endLine": 102,
                  "endColumn": 65,
                  "charOffset": 2671,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(dest_dis, buf.dis + ofs, ncopy * sizeof(*dest_dis)",
                    "rendered": {
                      "text": "memcpy(dest_dis, buf.dis + ofs, ncopy * sizeof(*dest_dis)",
                      "markdown": "`memcpy(dest_dis, buf.dis + ofs, ncopy * sizeof(*dest_dis)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AuxIndexStructures.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2671,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest_dis, <size of dest_dis>,  buf.dis + ofs,  ncopy * sizeof(*dest_dis)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-41ae1a80-a351-45ef-855c-58277c489b72",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AuxIndexStructures.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 8,
                  "endLine": 101,
                  "endColumn": 65,
                  "charOffset": 2603,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(dest_ids, buf.ids + ofs, ncopy * sizeof(*dest_ids)",
                    "rendered": {
                      "text": "memcpy(dest_ids, buf.ids + ofs, ncopy * sizeof(*dest_ids)",
                      "markdown": "`memcpy(dest_ids, buf.ids + ofs, ncopy * sizeof(*dest_ids)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AuxIndexStructures.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2603,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest_ids, <size of dest_ids>,  buf.ids + ofs,  ncopy * sizeof(*dest_ids)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-99e9b8f4-99ca-4fe7-9de6-b85be846213f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/CodePacker.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 4,
                  "endLine": 48,
                  "endColumn": 40,
                  "charOffset": 1197,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(flat_codes, block, code_size)",
                    "rendered": {
                      "text": "memcpy(flat_codes, block, code_size)",
                      "markdown": "`memcpy(flat_codes, block, code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/CodePacker.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1197,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(flat_codes, <size of flat_codes>,  block,  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b54126c9-f433-4b2a-b32a-751d55e96070",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/CodePacker.cpp"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 4,
                  "endLine": 43,
                  "endColumn": 40,
                  "charOffset": 1061,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(block, flat_codes, code_size)",
                    "rendered": {
                      "text": "memcpy(block, flat_codes, code_size)",
                      "markdown": "`memcpy(block, flat_codes, code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/CodePacker.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1061,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(block, <size of block>,  flat_codes,  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9d45364c-f7a5-476c-942d-a91bcae92757",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 12,
                  "endLine": 382,
                  "endColumn": 44,
                  "charOffset": 11409,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(c, ScopedIds(il, list_no)",
                    "rendered": {
                      "text": "memcpy(c, ScopedIds(il, list_no)",
                      "markdown": "`memcpy(c, ScopedIds(il, list_no)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11409,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(c, <size of c>,  ScopedIds(il,  list_no)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9d83e2d0-8e65-4a1f-b952-9512789180b2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 12,
                  "endLine": 347,
                  "endColumn": 46,
                  "charOffset": 10324,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(c, ScopedCodes(il, list_no)",
                    "rendered": {
                      "text": "memcpy(c, ScopedCodes(il, list_no)",
                      "markdown": "`memcpy(c, ScopedCodes(il, list_no)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10324,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(c, <size of c>,  ScopedCodes(il,  list_no)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-df608d70-6a1f-48f0-ab10-8c1d7527a5bc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 4,
                  "endLine": 285,
                  "endColumn": 78,
                  "charOffset": 8461,
                  "charLength": 74,
                  "snippet": {
                    "text": "memcpy(&codes[list_no][offset * code_size], codes_in, code_size * n_entry)",
                    "rendered": {
                      "text": "memcpy(&codes[list_no][offset * code_size], codes_in, code_size * n_entry)",
                      "markdown": "`memcpy(&codes[list_no][offset * code_size], codes_in, code_size * n_entry)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8461,
                        "charLength": 74
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&codes[list_no][offset * code_size], <size of &codes[list_no][offset * code_size]>,  codes_in,  code_size * n_entry)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a68b3597-e990-4b7a-bac8-cf58c6c9aad3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 4,
                  "endLine": 284,
                  "endColumn": 59,
                  "charOffset": 8389,
                  "charLength": 55,
                  "snippet": {
                    "text": "memcpy(&ids[list_no][offset], ids_in, sizeof(ids_in[0])",
                    "rendered": {
                      "text": "memcpy(&ids[list_no][offset], ids_in, sizeof(ids_in[0])",
                      "markdown": "`memcpy(&ids[list_no][offset], ids_in, sizeof(ids_in[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8389,
                        "charLength": 55
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&ids[list_no][offset], <size of &ids[list_no][offset]>,  ids_in,  sizeof(ids_in[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-31a5f8a2-5bcf-4548-8765-2712b6376612",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 4,
                  "endLine": 252,
                  "endColumn": 69,
                  "charOffset": 7500,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(&codes[list_no][o * code_size], code, code_size * n_entry)",
                    "rendered": {
                      "text": "memcpy(&codes[list_no][o * code_size], code, code_size * n_entry)",
                      "markdown": "`memcpy(&codes[list_no][o * code_size], code, code_size * n_entry)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7500,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&codes[list_no][o * code_size], <size of &codes[list_no][o * code_size]>,  code,  code_size * n_entry)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a8283b67-88c7-4b67-832a-7b26e6d8a1ee",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 4,
                  "endLine": 250,
                  "endColumn": 54,
                  "charOffset": 7379,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])",
                    "rendered": {
                      "text": "memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])",
                      "markdown": "`memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7379,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&ids[list_no][o], <size of &ids[list_no][o]>,  ids_in,  sizeof(ids_in[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b9abbd6f-a226-4692-b1bf-046c1cb8b57f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexFlatCodes.cpp"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 4,
                  "endLine": 97,
                  "endColumn": 37,
                  "charOffset": 2783,
                  "charLength": 113,
                  "snippet": {
                    "text": "memcpy(codes.data() + (ntotal * code_size),\n           other->codes.data(),\n           other->ntotal * code_size)",
                    "rendered": {
                      "text": "memcpy(codes.data() + (ntotal * code_size),\n           other->codes.data(),\n           other->ntotal * code_size)",
                      "markdown": "`memcpy(codes.data() + (ntotal * code_size),\n           other->codes.data(),\n           other->ntotal * code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexFlatCodes.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2783,
                        "charLength": 113
                      },
                      "insertedContent": {
                        "text": "memcpy_s(codes.data() + (ntotal * code_size), <size of codes.data() + (ntotal * code_size)>, \n           other->codes.data(), \n           other->ntotal * code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5db5f452-f54f-4f42-87a1-1e3d2ab87341",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/MetaIndexes.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 12,
                  "endLine": 99,
                  "endColumn": 76,
                  "charOffset": 3181,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(sub_x + i * sub_d, x + ofs + i * d, sub_d * sizeof(sub_x)",
                    "rendered": {
                      "text": "memcpy(sub_x + i * sub_d, x + ofs + i * d, sub_d * sizeof(sub_x)",
                      "markdown": "`memcpy(sub_x + i * sub_d, x + ofs + i * d, sub_d * sizeof(sub_x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/MetaIndexes.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3181,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(sub_x + i * sub_d, <size of sub_x + i * sub_d>,  x + ofs + i * d,  sub_d * sizeof(sub_x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ba28dce4-ae8b-4b5a-97f3-afb959514a5b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexRefine.cpp"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 8,
                  "endLine": 182,
                  "endColumn": 66,
                  "charOffset": 5618,
                  "charLength": 58,
                  "snippet": {
                    "text": "memcpy(tmp2.get() + i * cs2, bytes + i * (cs1 + cs2), cs2)",
                    "rendered": {
                      "text": "memcpy(tmp2.get() + i * cs2, bytes + i * (cs1 + cs2), cs2)",
                      "markdown": "`memcpy(tmp2.get() + i * cs2, bytes + i * (cs1 + cs2), cs2)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexRefine.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5618,
                        "charLength": 58
                      },
                      "insertedContent": {
                        "text": "memcpy_s(tmp2.get() + i * cs2, <size of tmp2.get() + i * cs2>,  bytes + i * (cs1 + cs2),  cs2)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7457b4af-a69f-4afa-9243-46e96e943f3a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexRefine.cpp"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 8,
                  "endLine": 173,
                  "endColumn": 50,
                  "charOffset": 5265,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(b + cs1, tmp2.get() + cs2 * i, cs2)",
                    "rendered": {
                      "text": "memcpy(b + cs1, tmp2.get() + cs2 * i, cs2)",
                      "markdown": "`memcpy(b + cs1, tmp2.get() + cs2 * i, cs2)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexRefine.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5265,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(b + cs1, <size of b + cs1>,  tmp2.get() + cs2 * i,  cs2)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ddc7e0d0-81d9-4a71-bfc4-d2905bc7c226",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexRefine.cpp"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 8,
                  "endLine": 172,
                  "endColumn": 44,
                  "charOffset": 5219,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(b, tmp1.get() + cs1 * i, cs1)",
                    "rendered": {
                      "text": "memcpy(b, tmp1.get() + cs1 * i, cs1)",
                      "markdown": "`memcpy(b, tmp1.get() + cs1 * i, cs1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexRefine.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5219,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(b, <size of b>,  tmp1.get() + cs1 * i,  cs1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6ec671bd-7184-43b2-889f-53977d7e4c71",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/BlockInvertedLists.cpp"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 8,
                  "endLine": 57,
                  "endColumn": 74,
                  "charOffset": 1667,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(&codes[list_no][o * code_size], code, n_block * block_size)",
                    "rendered": {
                      "text": "memcpy(&codes[list_no][o * code_size], code, n_block * block_size)",
                      "markdown": "`memcpy(&codes[list_no][o * code_size], code, n_block * block_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/BlockInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1667,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&codes[list_no][o * code_size], <size of &codes[list_no][o * code_size]>,  code,  n_block * block_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7755715f-b03f-4657-bbe7-75f10dccca47",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/BlockInvertedLists.cpp"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 4,
                  "endLine": 52,
                  "endColumn": 54,
                  "charOffset": 1419,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])",
                    "rendered": {
                      "text": "memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])",
                      "markdown": "`memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/BlockInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1419,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&ids[list_no][o], <size of &ids[list_no][o]>,  ids_in,  sizeof(ids_in[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-40130916-6f60-4c60-8f2e-998ec36a59ac",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 48,
                  "charOffset": 2538,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(k * nq * sizeof(float)",
                    "rendered": {
                      "text": "malloc(k * nq * sizeof(float)",
                      "markdown": "`malloc(k * nq * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2538,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-08582e80-e7a8-4ef8-81a4-5fef65d9d21f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 19,
                  "endLine": 83,
                  "endColumn": 48,
                  "charOffset": 2487,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(k * nq * sizeof(idx_t)",
                    "rendered": {
                      "text": "malloc(k * nq * sizeof(idx_t)",
                      "markdown": "`malloc(k * nq * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2487,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3de2c443-b439-45bc-bc68-7c9282879d15",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 19,
                  "endLine": 71,
                  "endColumn": 47,
                  "charOffset": 2105,
                  "charLength": 28,
                  "snippet": {
                    "text": "malloc(k * 5 * sizeof(float)",
                    "rendered": {
                      "text": "malloc(k * 5 * sizeof(float)",
                      "markdown": "`malloc(k * 5 * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2105,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-01f7374b-eabc-4337-85cd-98bbaac5fca4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 19,
                  "endLine": 70,
                  "endColumn": 47,
                  "charOffset": 2055,
                  "charLength": 28,
                  "snippet": {
                    "text": "malloc(k * 5 * sizeof(idx_t)",
                    "rendered": {
                      "text": "malloc(k * 5 * sizeof(idx_t)",
                      "markdown": "`malloc(k * 5 * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2055,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c13a4c94-6573-48bb-b9bb-5273c23f3f17",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 16,
                  "endLine": 43,
                  "endColumn": 45,
                  "charOffset": 1205,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(d * nq * sizeof(float)",
                    "rendered": {
                      "text": "malloc(d * nq * sizeof(float)",
                      "markdown": "`malloc(d * nq * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1205,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8b87469c-c4aa-41e5-9eea-51e5c67a034e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 16,
                  "endLine": 42,
                  "endColumn": 45,
                  "charOffset": 1157,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(d * nb * sizeof(float)",
                    "rendered": {
                      "text": "malloc(d * nb * sizeof(float)",
                      "markdown": "`malloc(d * nb * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1157,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-54ed6d7d-b91f-4a19-bead-505418e4fdcb",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 36,
                  "endLine": 32,
                  "endColumn": 44,
                  "charOffset": 917,
                  "charLength": 8,
                  "snippet": {
                    "text": "RAND_MAX",
                    "rendered": {
                      "text": "RAND_MAX",
                      "markdown": "`RAND_MAX`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-3fd5ef3f-434d-4549-807c-bfe9e2c2e719",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 19,
                  "endLine": 32,
                  "endColumn": 24,
                  "charOffset": 900,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-fde6f7ea-6c69-4586-a18f-7b44b0f9b64f",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/AutoTune_c.cpp"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 8,
                  "endLine": 55,
                  "endColumn": 47,
                  "charOffset": 1544,
                  "charLength": 39,
                  "snippet": {
                    "text": "strncpy(char_buffer, rep.c_str(), size)",
                    "rendered": {
                      "text": "strncpy(char_buffer, rep.c_str(), size)",
                      "markdown": "`strncpy(char_buffer, rep.c_str(), size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/AutoTune_c.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1544,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "strcpy_s(char_buffer,  size,  rep.c_str())"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/AutoTune_c.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1544,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "strlcpy(char_buffer,  rep.c_str(),  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fe70a052-32bd-4cd9-ab3d-e3e2609318e8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "demos/demo_weighted_kmeans.cpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 4,
                  "endLine": 60,
                  "endColumn": 63,
                  "charOffset": 1457,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(centroids, clus.centroids.data(), sizeof(*centroids)",
                    "rendered": {
                      "text": "memcpy(centroids, clus.centroids.data(), sizeof(*centroids)",
                      "markdown": "`memcpy(centroids, clus.centroids.data(), sizeof(*centroids)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "demos/demo_weighted_kmeans.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1457,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids, <size of centroids>,  clus.centroids.data(),  sizeof(*centroids)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-29288e4e-a2a0-448c-996c-325abd7f2f04",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 4,
                  "endLine": 513,
                  "endColumn": 30,
                  "charOffset": 14757,
                  "charLength": 26,
                  "snippet": {
                    "text": "memcpy(&norm2, &norm_i, 4)",
                    "rendered": {
                      "text": "memcpy(&norm2, &norm_i, 4)",
                      "markdown": "`memcpy(&norm2, &norm_i, 4)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14757,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&norm2, <size of &norm2>,  &norm_i,  4)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-501dcaf4-215e-49c3-a101-ee2e9cde85d5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 12,
                  "endLine": 384,
                  "endColumn": 41,
                  "charOffset": 10698,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(ips, LUT, sizeof(*ips)",
                    "rendered": {
                      "text": "memcpy(ips, LUT, sizeof(*ips)",
                      "markdown": "`memcpy(ips, LUT, sizeof(*ips)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10698,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ips, <size of ips>,  LUT,  sizeof(*ips)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-81e2c9ca-2d7e-4669-8dfc-dddf8485ec8e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 12,
                  "endLine": 335,
                  "endColumn": 37,
                  "charOffset": 9620,
                  "charLength": 25,
                  "snippet": {
                    "text": "memcpy(xi, c, sizeof(*xi)",
                    "rendered": {
                      "text": "memcpy(xi, c, sizeof(*xi)",
                      "markdown": "`memcpy(xi, c, sizeof(*xi)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9620,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  c,  sizeof(*xi)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0bd0d64b-017b-4ba0-a1d2-432565daf97f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 16,
                  "endLine": 301,
                  "endColumn": 40,
                  "charOffset": 8549,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(xi, c, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xi, c, sizeof(*x)",
                      "markdown": "`memcpy(xi, c, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8549,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  c,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e612c43a-6825-48e4-b855-97ff9e68d10e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 12,
                  "endLine": 198,
                  "endColumn": 36,
                  "charOffset": 5148,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(&inorm, &norm, 4)",
                    "rendered": {
                      "text": "memcpy(&inorm, &norm, 4)",
                      "markdown": "`memcpy(&inorm, &norm, 4)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5148,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&inorm, <size of &inorm>,  &norm,  4)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a6fb02c4-8bd9-459a-9cd4-1cad392e5649",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 16,
                  "endLine": 272,
                  "endColumn": 40,
                  "charOffset": 7730,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(xi, c, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xi, c, sizeof(*x)",
                      "markdown": "`memcpy(xi, c, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7730,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  c,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cee44ef6-baaa-455e-8919-34f496818a2d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/PolysemousTraining.cpp"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 12,
                  "endLine": 934,
                  "endColumn": 46,
                  "charOffset": 29263,
                  "charLength": 134,
                  "snippet": {
                    "text": "memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])",
                    "rendered": {
                      "text": "memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])",
                      "markdown": "`memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/PolysemousTraining.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29263,
                        "charLength": 134
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids + perm[i] * dsub, <size of centroids + perm[i] * dsub>, \n                   centroids_copy.data() + i * dsub, \n                   dsub * sizeof(centroids[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-015e632c-b90f-4683-9749-eb7dfdc0fb09",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/PolysemousTraining.cpp"
                },
                "region": {
                  "startLine": 878,
                  "startColumn": 12,
                  "endLine": 880,
                  "endColumn": 32,
                  "charOffset": 27593,
                  "charLength": 114,
                  "snippet": {
                    "text": "memcpy(gt_distances.data(),\n                   pq.sdc_table.data() + m * nq * nb,\n                   sizeof(float)",
                    "rendered": {
                      "text": "memcpy(gt_distances.data(),\n                   pq.sdc_table.data() + m * nq * nb,\n                   sizeof(float)",
                      "markdown": "`memcpy(gt_distances.data(),\n                   pq.sdc_table.data() + m * nq * nb,\n                   sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/PolysemousTraining.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 27593,
                        "charLength": 114
                      },
                      "insertedContent": {
                        "text": "memcpy_s(gt_distances.data(), <size of gt_distances.data()>, \n                   pq.sdc_table.data() + m * nq * nb, \n                   sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a897e991-20c1-4437-9f80-c29f1c87a30c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/PolysemousTraining.cpp"
                },
                "region": {
                  "startLine": 854,
                  "startColumn": 16,
                  "endLine": 856,
                  "endColumn": 36,
                  "charOffset": 26855,
                  "charLength": 117,
                  "snippet": {
                    "text": "memcpy(xtrain.data() + i * dsub,\n                       x + i * pq.d + m * dsub,\n                       sizeof(float)",
                    "rendered": {
                      "text": "memcpy(xtrain.data() + i * dsub,\n                       x + i * pq.d + m * dsub,\n                       sizeof(float)",
                      "markdown": "`memcpy(xtrain.data() + i * dsub,\n                       x + i * pq.d + m * dsub,\n                       sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/PolysemousTraining.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26855,
                        "charLength": 117
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xtrain.data() + i * dsub, <size of xtrain.data() + i * dsub>, \n                       x + i * pq.d + m * dsub, \n                       sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d2955149-a723-48b7-a82d-db4d490240b5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/PolysemousTraining.cpp"
                },
                "region": {
                  "startLine": 822,
                  "startColumn": 12,
                  "endLine": 824,
                  "endColumn": 46,
                  "charOffset": 25981,
                  "charLength": 134,
                  "snippet": {
                    "text": "memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])",
                    "rendered": {
                      "text": "memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])",
                      "markdown": "`memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/PolysemousTraining.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25981,
                        "charLength": 134
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids + perm[i] * dsub, <size of centroids + perm[i] * dsub>, \n                   centroids_copy.data() + i * dsub, \n                   dsub * sizeof(centroids[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-771ad9c7-e665-45ce-8e56-a032628ca05f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/PolysemousTraining.cpp"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 12,
                  "endLine": 94,
                  "endColumn": 58,
                  "charOffset": 2619,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(best_perm, perm.data(), sizeof(perm[0])",
                    "rendered": {
                      "text": "memcpy(best_perm, perm.data(), sizeof(perm[0])",
                      "markdown": "`memcpy(best_perm, perm.data(), sizeof(perm[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/PolysemousTraining.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2619,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(best_perm, <size of best_perm>,  perm.data(),  sizeof(perm[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-09e491a3-b749-442a-b1bb-cf93374bd86e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/VectorTransform.cpp"
                },
                "region": {
                  "startLine": 1232,
                  "startColumn": 8,
                  "endLine": 1232,
                  "endColumn": 34,
                  "charOffset": 33681,
                  "charLength": 26,
                  "snippet": {
                    "text": "memcpy(xt, x, sizeof(x[0])",
                    "rendered": {
                      "text": "memcpy(xt, x, sizeof(x[0])",
                      "markdown": "`memcpy(xt, x, sizeof(x[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/VectorTransform.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33681,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xt, <size of xt>,  x,  sizeof(x[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-04a9d25f-552d-4d92-945d-a440f5cae28c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/VectorTransform.cpp"
                },
                "region": {
                  "startLine": 1243,
                  "startColumn": 4,
                  "endLine": 1243,
                  "endColumn": 31,
                  "charOffset": 33944,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(x, xt, sizeof(xt[0])",
                    "rendered": {
                      "text": "memcpy(x, xt, sizeof(xt[0])",
                      "markdown": "`memcpy(x, xt, sizeof(xt[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/VectorTransform.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33944,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x, <size of x>,  xt,  sizeof(xt[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c680db7b-f508-4f84-aefa-30f6dffac7ff",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/VectorTransform.cpp"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 8,
                  "endLine": 742,
                  "endColumn": 42,
                  "charOffset": 19533,
                  "charLength": 103,
                  "snippet": {
                    "text": "memcpy(rotation.data(),\n               init_rotation.data(),\n               d * d * sizeof(rotation[0])",
                    "rendered": {
                      "text": "memcpy(rotation.data(),\n               init_rotation.data(),\n               d * d * sizeof(rotation[0])",
                      "markdown": "`memcpy(rotation.data(),\n               init_rotation.data(),\n               d * d * sizeof(rotation[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/VectorTransform.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19533,
                        "charLength": 103
                      },
                      "insertedContent": {
                        "text": "memcpy_s(rotation.data(), <size of rotation.data()>, \n               init_rotation.data(), \n               d * d * sizeof(rotation[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fe46cbd7-7f24-4661-851d-0ef7d44c2408",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/VectorTransform.cpp"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 16,
                  "endLine": 664,
                  "endColumn": 78,
                  "charOffset": 17437,
                  "charLength": 62,
                  "snippet": {
                    "text": "memcpy(&A[row_dst * d_in], &Ain[i * d_in], d_in * sizeof(A[0])",
                    "rendered": {
                      "text": "memcpy(&A[row_dst * d_in], &Ain[i * d_in], d_in * sizeof(A[0])",
                      "markdown": "`memcpy(&A[row_dst * d_in], &Ain[i * d_in], d_in * sizeof(A[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/VectorTransform.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17437,
                        "charLength": 62
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&A[row_dst * d_in], <size of &A[row_dst * d_in]>,  &Ain[i * d_in],  d_in * sizeof(A[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dbd3021d-720d-41e1-aa56-66f2c3ccad05",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/IndexIVF_c.cpp"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 4,
                  "endLine": 125,
                  "endColumn": 51,
                  "charOffset": 3571,
                  "charLength": 47,
                  "snippet": {
                    "text": "memcpy(invlist, list, list_size * sizeof(idx_t)",
                    "rendered": {
                      "text": "memcpy(invlist, list, list_size * sizeof(idx_t)",
                      "markdown": "`memcpy(invlist, list, list_size * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/IndexIVF_c.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3571,
                        "charLength": 47
                      },
                      "insertedContent": {
                        "text": "memcpy_s(invlist, <size of invlist>,  list,  list_size * sizeof(idx_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}