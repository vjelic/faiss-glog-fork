{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-0f256cf5-a027-4cd8-ade6-038ef253e9f4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ae1b4d4e-f2a1-4382-b192-022e1e85d009",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fe4a86e0-9750-4d63-b983-6b5dd9e65326",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-25265b38-1a87-4640-9c85-1035fddf9e7e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-36aaf873-46c3-4125-a109-0b084d33ad8e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1f19fe99-e56a-4337-8c7b-655f529e92ce",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1318ae9a-b5ad-4025-848f-4c7a19ad8ebb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-59611ff3-bff8-4db6-9064-5c1e863227a6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f710c8a2-26c1-41d6-907b-8f0477821699",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d8aab243-30f8-4142-aca6-714968d15d8d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a24b018d-222c-4b75-948f-81c93fe5d91d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-32be3a79-9c29-4a17-bdbc-516289da342a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-577be2e7-11dd-4d91-b9eb-27d29d41b44d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-17eb359f-24d5-4acf-a9e0-24dfc365fcd9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-cbd97a3e-cd30-4459-b3a7-343131fee6d4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-f714ed5f-8beb-4122-a408-df0111c395ad",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-360db1fc-8b4c-489e-844b-bf139159092d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-67b6c9c0-e93e-4101-9519-9e2b18d9b1c4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-b67d5e46-7e80-44b3-adf1-0c57d9e6f7d3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-dc65dbd3-a48a-40b8-844b-dc21df4100cc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-5efcd099-36ba-4a59-97b1-1274649c2515",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-42c7ebff-1998-4225-a45f-c4f1480d3137",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6b1e748f-5dbd-4135-885c-2689cab742d8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-d9634f19-2fb1-473c-9706-c5d390fe020e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-61e92297-e9f0-4063-ae62-d0c7969e4a07",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-b0377a21-93a8-417d-989d-ea83d69239b3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-b57f0416-1e6d-4ab0-8e17-1fb1dcd7926d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-916c43ee-eb0b-4ee6-952f-877f78d4d48c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-2345e067-aaa2-4f8d-9434-2c95afc378e2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-e5b55b64-11bd-44dd-bbeb-51e8b68ac94f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a43be948-abda-4bef-808a-ca1dc7fe0667",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-6706eb0f-eccb-4cde-8c82-bb93fbef1bb3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-90d454f6-5bd0-4d95-ae07-9414499d7a54",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-a517dea3-ccbd-40a4-83c5-32bdd70e9ff7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8a642b8d-28c9-4590-941f-8bd9e98a4d5d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-df74753d-22cf-44b5-8f11-bce0d9d2b087",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d8176f5e-5c31-4a02-bb4d-f2c183c3e82d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-934d7abb-e117-45d6-ad70-610450fb2d34",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-837b30f9-1e1c-4e94-a5c7-1185a38fac97",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-87e23329-4ff6-4b1a-a2e6-a35ee24adb5a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b66d691f-df65-4965-93e1-fba6067e23da",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7f291581-6589-479d-9112-0ef96ceadcbf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0ead4825-b086-45d0-a2e1-421d38bae185",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-f7c8bc73-9b74-4bd0-b1ea-6629180d5def",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-0d325a9c-61cb-4247-8242-98083e22b13a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-69a4670c-8c1a-437a-b1bf-ca97785fa859",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-88a1da3c-7731-4a74-b158-b6cac7acb7ce",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-66bf1be2-d8e3-4409-8013-3347a295a4c6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-78e55570-3c86-46e6-846d-5052668c1475",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-b84c8b26-6e42-481e-8887-4e08d5f9b1b8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-28129e5f-898f-46cf-a9ac-9e6d8950ffdb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-2ef4c8a2-5e3d-4c21-9d3c-3358edfbb420",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-9d03a74e-06ff-4b99-9a8d-081a78e0b2c3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-6b8e2474-c7f1-42ee-bf50-1e2d42e64047",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-7e2a0868-95c2-4f2c-8af9-86ac6a6778a9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-116c591f-c2d8-464c-8c03-a3b68387f368",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-53bf6301-794e-429c-bf9e-617c28991daa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-28bb30f4-5422-4cb4-a2fe-6cd5b1231cb0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-190280d0-b8e5-4c1c-8312-56b6592943fe",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-1556a907-e470-4c9b-a8d0-636490f31af1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-706b285c-8c76-4746-b7ea-737c8a4becba",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-59dc5d51-5d1d-4424-b5dc-715a4556ee26",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-ebf0fe8e-3840-4139-91c0-f87b08cf5ec7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-16f6f1d4-086c-4d26-b0e3-7e3b0e2b43aa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-fc9b4430-ddc0-487d-b36a-41ff56e43200",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-4fab9cdf-ae68-4fb6-aacc-ddec06a60a21",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-3c8ca8f8-e577-4cee-b934-058b72f796b6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-790118c8-fbef-4686-9759-7d34f7377fac",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-e417c4d6-173f-4c9b-b4cb-5e14c75b6a9d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-f49221d5-e702-4413-9299-884adc131846",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-938bf1cc-9f8d-4aa8-b520-fdb6012b6526",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-aa6922ea-251f-4549-bc05-a624305a581c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-df34c53a-59bd-4f5b-80cd-f1afba131559",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-d9a8a4cf-78a5-47dc-a7bb-1d3bba911368",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-7c79e296-f2e6-4c05-a1b9-4edba571ed0d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-b235cae4-fbd6-4646-837e-472551f02aa2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-5b408525-a486-45d6-ae93-aaf550eb760b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-4301de54-1e21-4ebd-86ae-b3a798581bd9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-d84ec34f-fa2f-4caf-a0ae-b22fab896583",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7d5d6a1e-9318-49b6-bd05-8a3dbf8dad38",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e3e6d72a-240c-4572-b658-f803daf89e88",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5d4e3d8b-5e40-4ef8-bab5-619fe28cacaa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c0332cfd-3edb-426d-819c-2fb8f41644aa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-604098a4-6f0d-49c4-9071-f49b4af9d9e2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c64162db-d211-4a50-bdf3-6f92d15c11db",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0242da4d-8d51-405f-93c8-d0b15cb00a62",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6113fc99-0075-4b55-9f8b-1e264aab1ae9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bdf71a4d-dc89-4bfa-893b-335603553a8b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f6ef6840-770d-455a-9453-8015ca08715a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-665f8108-94d2-4819-a4e0-e2c96d843446",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0a2aa198-758e-461e-aafd-e6b337e8cb93",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9b4cb899-9658-4656-94b0-04cca9783932",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-d9775ec4-f219-442b-a042-5c00ed4c6e08",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2db9fcdd-c9e7-4d9b-a5ee-0c25e8532a98",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bb8fbf4f-b571-464c-b69e-848972eb5c95",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9afcd993-fec3-4619-b094-595baf8cb716",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-05aa5564-b75f-4c08-a2ba-8d89898d8b96",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-37c3126a-79e3-4dc8-9417-26b6215c450b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-685e068a-905b-4fd0-bbce-84c11d2227dc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5c81244b-e35c-479f-9464-cb6c9f8ab235",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f157481d-2e9d-449b-b888-80509a1f99f9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4eb54eb6-7395-406a-874d-9b1c2dbb4efd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8b954584-6ad9-4a5d-a503-dbc44ac6fedc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5cc14d19-531b-4f2e-8ed1-43d67a004aeb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7e2381bf-76f0-4f54-8fe8-6908bd360f1d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-de1baea2-eadc-4a71-8961-f29222afb093",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d1576f86-1415-4898-9023-89721abdc7fe",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7f1613e3-fb86-4f3f-8780-84361cd84207",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-41e26e41-1c8a-4d77-88f2-a39b988ca6f2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-98432006-1ca9-44d9-bfb5-39f55e17484e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f25ed186-1bfe-4640-a706-1a5304ab607e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-db267679-6807-4e43-8550-ca530f33525f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2c365b6d-2926-4fe9-993f-f3896013ec39",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1a2c5011-4977-4746-88b7-adddd1570d5b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-996a5f9a-9ba7-4bb7-90cd-83b641012f23",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a27550a4-5232-48a9-aed9-a339b97bc27f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-23a662f7-52d0-402b-ad72-822f2496b8bb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d6d9f6d4-53c3-4f7b-90bf-2aa3a13666ea",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7a4a63a4-f094-4214-a306-d15bcfd60850",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-740267a1-2cf9-4c4c-9533-1bcf5fa46760",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2cd63b03-eb4f-456e-a14b-da47f47fbb19",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7855c750-6eaf-4fce-a56a-db0804f695bf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-36599ea6-b8a1-45da-b5ef-cdd3e5b5ab5e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-da68bc08-a504-4898-b44a-0eb8821836fc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1f858f30-40ab-4bd9-8ebd-06425bd53f66",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d6ecf55a-2778-41a8-98f3-3e487f02fc00",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c25e8eaa-525d-4839-adb3-51d6163be5fe",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-67cab4c9-f796-47aa-b4f3-7e65817bbd1c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2c9fcb4a-9c44-43d3-8cc3-01bf53bc8b32",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2242d8c4-2d79-4f24-9245-a29c6e16dd8e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0c768f07-41da-4432-985d-c503b8dc167e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1d11ed96-5a47-40a1-b650-0a73190b9eb3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ed8e1d5d-7db8-4403-90d9-43773ef5e24e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-51d86574-abaa-42fd-b1d2-5a2e4e1bc9ca",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-04f0deb5-d928-4a78-8622-7aed9f92b8b8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4b62fa46-3624-4fe5-96e4-333d640f5808",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f959276b-c89b-47bf-b38c-ea5d48858dcc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c358f4c4-527d-44ae-acab-428c8ed93135",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7269bb26-66df-4e95-ac88-fded8f3f19f8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2ce26d8b-f00c-4e34-89a5-f7e4617bc1d6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9dd87820-148e-498a-abcd-9849bbfd7b1a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-79ddf49c-e961-459a-bce3-2aa57f472cd2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-d57fbe14-d78b-4127-84b4-ade27a0086cd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-da8f6a83-c6a8-4921-a0ab-aa7be3a02afe",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-181ffd02-e2ed-4e61-8ade-81b3bd5af4f2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-c611f2ec-f9b0-4f6a-b6a4-ea8d585f5d7e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-5ed862b2-eb44-4860-b07c-ff34e3a357f7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-ebd85744-85f8-4a12-bbec-f16e3717a282",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-ef21bf92-adab-44a9-bcfc-91bdf97fdfb7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-3ad2693f-547a-4999-96e4-7a94aac55b04",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-1aed454b-ee26-4cf9-974e-ee95b140c3d4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-5fd8b5fa-0fd7-4174-befc-fa799a9024bd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-c5219476-d350-4839-b0ad-4689833075e5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-a37114c4-e84e-4455-a3c1-1d4ef257e664",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-5515486b-4227-4bc7-ac63-3a9e60492921",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-81d17030-5907-4f97-8b24-a8a1c79843af",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-de2e7593-5f60-414b-99c9-a3e6001b462b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-1ad5c746-b20a-451c-bca3-e13d8754774e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-f2e83d91-3c47-4bde-8495-58d02f0e9dc6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b5940a6f-dbb2-42cf-b015-76c7c0f0ac2f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f0ab978a-6328-4193-af81-1764b01a8ad4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-eb83eab7-8297-4390-8924-d37bd8ad4e2f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-88a14ed7-3a4a-401c-b1f6-ff5a67432299",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS126858"
                ]
              }
            },
            {
              "id": "glog-195c4de8-75cf-4e10-be06-3c5f0f7448ee",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-941d57a7-969f-4655-9c27-93ba060b0cad",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3018ebb7-0e40-4ab6-ba92-49a7cd82ec68",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3886c924-8f9b-4680-98d2-c174ced60b7c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bcf83ce2-2474-42d8-80df-33d368bcba0f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-bc3c7cd2-b659-4f3e-9a2c-786aff8ae8a6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-328e773b-76d3-4940-a750-3f04db4f1b71",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6e5da92f-6490-4e22-8e12-1976cdf00062",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e61c5073-facd-4a83-bdb4-5db68a1bb89b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ae939bd8-11a8-4b10-ad4e-d1e1d02a34e7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-397ac12c-54ec-45a1-ad0a-f15cf1ec672c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-832b4ce7-44f6-4fb7-bfcb-b293cc306e90",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-26219fd7-277d-46de-b10a-ddc75c5d7efa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-f4d96683-898a-49a8-9638-2c3dc0d9851a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-29f3b550-ab94-4032-a528-8b58131a8c37",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-f2185ffe-3cc7-4037-b383-72e462fe7dde",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-28b43dcd-e614-4914-97d4-3b59979fc33a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-f7f3ec93-f7bd-452c-8ba8-4b1d2ae15367",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-f0317d08-0eca-4941-adac-ef48b70998a1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8705d325-d542-4889-b4b4-32bc9ea42aca",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2774ac49-da56-4b3f-b31c-beff17f28128",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b59688a4-55f0-4ab4-bc41-0f30bdace81b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-98e4eb72-df2c-45ae-ab10-b4981601fa0a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-22e0f5e4-fa82-4d5c-921b-9b0162a06625",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-14436bd9-3949-40e3-a271-83bb9f3522b8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-21801f86-d178-4e0f-8d6f-fedda107ace2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-371783d2-e2d0-4ee4-83c6-7c075c1191bd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-52030057-3176-4acf-83fd-9d1711aa65f7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5e3fcbb8-6239-4443-98ee-789914e2c061",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d991ed76-f549-4e0c-a46d-2d5bffef902a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b6945f42-fdfc-4f05-9446-0d2c7397c714",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a12fac8f-9a90-4c95-a1a5-c4470755e460",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6a730700-9107-4255-ac70-933465b46597",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7f64d17f-765c-4a92-840d-18c33ea7362a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4536fcea-8eed-4af7-ba74-fae6ebfc2f43",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-105b4f3d-fbe3-4b80-839e-99fc26c9b133",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-19370df6-8bf3-47c7-b649-2ef238bef20f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1fdb8be1-5cea-4741-ba61-b387f1024921",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fc1af8e1-205a-4fb2-965e-aca8e2077819",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e68b975b-a0a5-4fda-acfd-6a9842d6438c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a6a7dff4-ea5e-45c3-943d-36dbbe2cc4ea",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d1047fd2-34b0-4eac-9ac0-f1037dd98b49",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-71767fa2-5ffc-4af8-99fe-2d3ca881776a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-403a32fe-0687-4cf8-8d27-cc9d0960eba0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f4ca6546-17fc-43e9-a5ec-6226455a27e3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4650046a-f00f-4c0a-bfb6-676cb6776965",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0a6f0c89-1b5f-46e9-97cc-d00e287e85ea",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9bb8cf38-c7e6-4424-9480-e1643dbfe857",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e72adb38-c375-4e96-a7fc-c1861c76edd6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-13454d14-b65b-4d33-b0e3-b8825516ac41",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8fab83eb-3dfa-4980-b92b-6acd4af440a2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d74d48d4-563f-4e46-8984-1dafdb22dbaf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5de98f90-9913-4bb3-b0a4-0293460b3437",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d3675d77-468e-4ebc-a4aa-5db7d90f8331",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2d2d746a-1d8b-4eb7-9cda-8fe84b478cc5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bf215c74-3912-460a-be2b-859118e554de",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-0f256cf5-a027-4cd8-ade6-038ef253e9f4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 8,
                  "endLine": 125,
                  "endColumn": 73,
                  "charOffset": 3152,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(cb, q->codebooks.data(), sub_codebook_size * sizeof(float)",
                    "rendered": {
                      "text": "memcpy(cb, q->codebooks.data(), sub_codebook_size * sizeof(float)",
                      "markdown": "`memcpy(cb, q->codebooks.data(), sub_codebook_size * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3152,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(cb, <size of cb>,  q->codebooks.data(),  sub_codebook_size * sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8b921d0b-26b3-47a8-868f-4a601b928ca1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 12,
                  "endLine": 173,
                  "endColumn": 39,
                  "charOffset": 4583,
                  "charLength": 111,
                  "snippet": {
                    "text": "memcpy(xsub.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(float)",
                    "rendered": {
                      "text": "memcpy(xsub.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(float)",
                      "markdown": "`memcpy(xsub.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4583,
                        "charLength": 111
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xsub.data() + i * q->d, <size of xsub.data() + i * q->d>, \n                   x + i * d + offset_d, \n                   q->d * sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ae1b4d4e-f2a1-4382-b192-022e1e85d009",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 20,
                  "endLine": 222,
                  "endColumn": 44,
                  "charOffset": 6173,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(xi, c, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xi, c, sizeof(*x)",
                      "markdown": "`memcpy(xi, c, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6173,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  c,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fe4a86e0-9750-4d63-b983-6b5dd9e65326",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 20,
                  "endLine": 253,
                  "endColumn": 44,
                  "charOffset": 7182,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(xi, c, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xi, c, sizeof(*x)",
                      "markdown": "`memcpy(xi, c, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7182,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  c,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-25265b38-1a87-4640-9c85-1035fddf9e7e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 12,
                  "endLine": 106,
                  "endColumn": 36,
                  "charOffset": 2520,
                  "charLength": 106,
                  "snippet": {
                    "text": "memcpy(xt.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xt.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(*x)",
                      "markdown": "`memcpy(xt.data() + i * q->d,\n                   x + i * d + offset_d,\n                   q->d * sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2520,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xt.data() + i * q->d, <size of xt.data() + i * q->d>, \n                   x + i * d + offset_d, \n                   q->d * sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-36aaf873-46c3-4125-a109-0b084d33ad8e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/pq4_fast_scan.cpp"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 12,
                  "endLine": 283,
                  "endColumn": 22,
                  "charOffset": 8058,
                  "charLength": 116,
                  "snippet": {
                    "text": "memcpy(dest + (sq / 2 * nq + qi) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)",
                    "rendered": {
                      "text": "memcpy(dest + (sq / 2 * nq + qi) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)",
                      "markdown": "`memcpy(dest + (sq / 2 * nq + qi) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/pq4_fast_scan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8058,
                        "charLength": 116
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest + (sq / 2 * nq + qi) * 32 + 16, <size of dest + (sq / 2 * nq + qi) * 32 + 16>, \n                   src + (q * nsq + sq + 1) * 16, \n                   16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1f19fe99-e56a-4337-8c7b-655f529e92ce",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/pq4_fast_scan.cpp"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 12,
                  "endLine": 280,
                  "endColumn": 22,
                  "charOffset": 7937,
                  "charLength": 107,
                  "snippet": {
                    "text": "memcpy(dest + (sq / 2 * nq + qi) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)",
                    "rendered": {
                      "text": "memcpy(dest + (sq / 2 * nq + qi) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)",
                      "markdown": "`memcpy(dest + (sq / 2 * nq + qi) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/pq4_fast_scan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7937,
                        "charLength": 107
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest + (sq / 2 * nq + qi) * 32, <size of dest + (sq / 2 * nq + qi) * 32>, \n                   src + (q * nsq + sq) * 16, \n                   16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1318ae9a-b5ad-4025-848f-4c7a19ad8ebb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/pq4_fast_scan.cpp"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 12,
                  "endLine": 248,
                  "endColumn": 22,
                  "charOffset": 7182,
                  "charLength": 115,
                  "snippet": {
                    "text": "memcpy(dest + (sq / 2 * nq + q) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)",
                    "rendered": {
                      "text": "memcpy(dest + (sq / 2 * nq + q) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)",
                      "markdown": "`memcpy(dest + (sq / 2 * nq + q) * 32 + 16,\n                   src + (q * nsq + sq + 1) * 16,\n                   16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/pq4_fast_scan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7182,
                        "charLength": 115
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest + (sq / 2 * nq + q) * 32 + 16, <size of dest + (sq / 2 * nq + q) * 32 + 16>, \n                   src + (q * nsq + sq + 1) * 16, \n                   16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-59611ff3-bff8-4db6-9064-5c1e863227a6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/pq4_fast_scan.cpp"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 12,
                  "endLine": 245,
                  "endColumn": 22,
                  "charOffset": 7062,
                  "charLength": 106,
                  "snippet": {
                    "text": "memcpy(dest + (sq / 2 * nq + q) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)",
                    "rendered": {
                      "text": "memcpy(dest + (sq / 2 * nq + q) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)",
                      "markdown": "`memcpy(dest + (sq / 2 * nq + q) * 32,\n                   src + (q * nsq + sq) * 16,\n                   16)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/pq4_fast_scan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7062,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest + (sq / 2 * nq + q) * 32, <size of dest + (sq / 2 * nq + q) * 32>, \n                   src + (q * nsq + sq) * 16, \n                   16)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f710c8a2-26c1-41d6-907b-8f0477821699",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/lattice_Zn.cpp"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 12,
                  "endLine": 634,
                  "endColumn": 29,
                  "charOffset": 17273,
                  "charLength": 98,
                  "snippet": {
                    "text": "memcpy(c + i * subdim,\n                   &cache[codes[i] * subdim],\n                   sizeof(*c)",
                    "rendered": {
                      "text": "memcpy(c + i * subdim,\n                   &cache[codes[i] * subdim],\n                   sizeof(*c)",
                      "markdown": "`memcpy(c + i * subdim,\n                   &cache[codes[i] * subdim],\n                   sizeof(*c)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/lattice_Zn.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17273,
                        "charLength": 98
                      },
                      "insertedContent": {
                        "text": "memcpy_s(c + i * subdim, <size of c + i * subdim>, \n                   &cache[codes[i] * subdim], \n                   sizeof(*c)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d8aab243-30f8-4142-aca6-714968d15d8d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ScalarQuantizer.cpp"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 8,
                  "endLine": 577,
                  "endColumn": 34,
                  "charOffset": 17333,
                  "charLength": 26,
                  "snippet": {
                    "text": "memcpy(vmax, x, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(vmax, x, sizeof(*x)",
                      "markdown": "`memcpy(vmax, x, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ScalarQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17333,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "memcpy_s(vmax, <size of vmax>,  x,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a24b018d-222c-4b75-948f-81c93fe5d91d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/lattice_Zn.cpp"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 12,
                  "endLine": 539,
                  "endColumn": 44,
                  "charOffset": 14439,
                  "charLength": 115,
                  "snippet": {
                    "text": "memcpy(&cache[i * dimsub],\n                   c.data() + dim - dimsub,\n                   dimsub * sizeof(*c.data()",
                    "rendered": {
                      "text": "memcpy(&cache[i * dimsub],\n                   c.data() + dim - dimsub,\n                   dimsub * sizeof(*c.data()",
                      "markdown": "`memcpy(&cache[i * dimsub],\n                   c.data() + dim - dimsub,\n                   dimsub * sizeof(*c.data()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/lattice_Zn.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14439,
                        "charLength": 115
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&cache[i * dimsub], <size of &cache[i * dimsub]>, \n                   c.data() + dim - dimsub, \n                   dimsub * sizeof(*c.data()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-32be3a79-9c29-4a17-bdbc-516289da342a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ScalarQuantizer.cpp"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 8,
                  "endLine": 576,
                  "endColumn": 34,
                  "charOffset": 17292,
                  "charLength": 26,
                  "snippet": {
                    "text": "memcpy(vmin, x, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(vmin, x, sizeof(*x)",
                      "markdown": "`memcpy(vmin, x, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ScalarQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17292,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "memcpy_s(vmin, <size of vmin>,  x,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-577be2e7-11dd-4d91-b9eb-27d29d41b44d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ScalarQuantizer.cpp"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 8,
                  "endLine": 488,
                  "endColumn": 47,
                  "charOffset": 14897,
                  "charLength": 39,
                  "snippet": {
                    "text": "memcpy(x_copy.data(), x, n * sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(x_copy.data(), x, n * sizeof(*x)",
                      "markdown": "`memcpy(x_copy.data(), x, n * sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ScalarQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14897,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x_copy.data(), <size of x_copy.data()>,  x,  n * sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-17eb359f-24d5-4acf-a9e0-24dfc365fcd9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 19,
                  "endLine": 100,
                  "endColumn": 48,
                  "charOffset": 3120,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(k * nq * sizeof(float)",
                    "rendered": {
                      "text": "malloc(k * nq * sizeof(float)",
                      "markdown": "`malloc(k * nq * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3120,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cbd97a3e-cd30-4459-b3a7-343131fee6d4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 19,
                  "endLine": 99,
                  "endColumn": 48,
                  "charOffset": 3069,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(k * nq * sizeof(idx_t)",
                    "rendered": {
                      "text": "malloc(k * nq * sizeof(idx_t)",
                      "markdown": "`malloc(k * nq * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3069,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f714ed5f-8beb-4122-a408-df0111c395ad",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 19,
                  "endLine": 87,
                  "endColumn": 47,
                  "charOffset": 2688,
                  "charLength": 28,
                  "snippet": {
                    "text": "malloc(k * 5 * sizeof(float)",
                    "rendered": {
                      "text": "malloc(k * 5 * sizeof(float)",
                      "markdown": "`malloc(k * 5 * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2688,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-360db1fc-8b4c-489e-844b-bf139159092d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 19,
                  "endLine": 86,
                  "endColumn": 47,
                  "charOffset": 2638,
                  "charLength": 28,
                  "snippet": {
                    "text": "malloc(k * 5 * sizeof(idx_t)",
                    "rendered": {
                      "text": "malloc(k * 5 * sizeof(idx_t)",
                      "markdown": "`malloc(k * 5 * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2638,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-67b6c9c0-e93e-4101-9519-9e2b18d9b1c4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 16,
                  "endLine": 48,
                  "endColumn": 45,
                  "charOffset": 1346,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(d * nq * sizeof(float)",
                    "rendered": {
                      "text": "malloc(d * nq * sizeof(float)",
                      "markdown": "`malloc(d * nq * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1346,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b67d5e46-7e80-44b3-adf1-0c57d9e6f7d3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 16,
                  "endLine": 47,
                  "endColumn": 45,
                  "charOffset": 1298,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(d * nb * sizeof(float)",
                    "rendered": {
                      "text": "malloc(d * nb * sizeof(float)",
                      "markdown": "`malloc(d * nb * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/gpu/example_gpu_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1298,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dc65dbd3-a48a-40b8-844b-dc21df4100cc",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 36,
                  "endLine": 32,
                  "endColumn": 44,
                  "charOffset": 943,
                  "charLength": 8,
                  "snippet": {
                    "text": "RAND_MAX",
                    "rendered": {
                      "text": "RAND_MAX",
                      "markdown": "`RAND_MAX`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-5efcd099-36ba-4a59-97b1-1274649c2515",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/gpu/example_gpu_c.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 19,
                  "endLine": 32,
                  "endColumn": 24,
                  "charOffset": 926,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-42c7ebff-1998-4225-a45f-c4f1480d3137",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/index_read.cpp"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 16,
                  "endLine": 750,
                  "endColumn": 77,
                  "charOffset": 24070,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(ail->codes[i].data(), vec.data(), ail->codes[i].size()",
                    "rendered": {
                      "text": "memcpy(ail->codes[i].data(), vec.data(), ail->codes[i].size()",
                      "markdown": "`memcpy(ail->codes[i].data(), vec.data(), ail->codes[i].size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/index_read.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24070,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ail->codes[i].data(), <size of ail->codes[i].data()>,  vec.data(),  ail->codes[i].size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6b1e748f-5dbd-4135-885c-2689cab742d8",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 42,
                  "endLine": 772,
                  "endColumn": 45,
                  "charOffset": 24541,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24541,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 24541,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-d9634f19-2fb1-473c-9706-c5d390fe020e",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 42,
                  "endLine": 669,
                  "endColumn": 45,
                  "charOffset": 21692,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21692,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 21692,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-61e92297-e9f0-4063-ae62-d0c7969e4a07",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 42,
                  "endLine": 593,
                  "endColumn": 45,
                  "charOffset": 19140,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19140,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19140,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-b0377a21-93a8-417d-989d-ea83d69239b3",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 42,
                  "endLine": 535,
                  "endColumn": 45,
                  "charOffset": 17610,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17610,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17610,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-b57f0416-1e6d-4ab0-8e17-1fb1dcd7926d",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 42,
                  "endLine": 415,
                  "endColumn": 45,
                  "charOffset": 13642,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13642,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13642,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-916c43ee-eb0b-4ee6-952f-877f78d4d48c",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 42,
                  "endLine": 403,
                  "endColumn": 45,
                  "charOffset": 13221,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13221,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13221,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-2345e067-aaa2-4f8d-9434-2c95afc378e2",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 42,
                  "endLine": 215,
                  "endColumn": 45,
                  "charOffset": 6189,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6189,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6189,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-e5b55b64-11bd-44dd-bbeb-51e8b68ac94f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 9,
                  "endLine": 113,
                  "endColumn": 39,
                  "charOffset": 3278,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(bytes, ds, sizeof(char)",
                    "rendered": {
                      "text": "memcpy(bytes, ds, sizeof(char)",
                      "markdown": "`memcpy(bytes, ds, sizeof(char)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3278,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes, <size of bytes>,  ds,  sizeof(char)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a43be948-abda-4bef-808a-ca1dc7fe0667",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_neon.h"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 12,
                  "endLine": 96,
                  "endColumn": 15,
                  "charOffset": 2761,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2761,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_neon.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2761,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-6706eb0f-eccb-4cde-8c82-bb93fbef1bb3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/NSG.h"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 8,
                  "endLine": 74,
                  "endColumn": 51,
                  "charOffset": 2012,
                  "charLength": 43,
                  "snippet": {
                    "text": "memcpy(data, g.data, N * K * sizeof(node_t)",
                    "rendered": {
                      "text": "memcpy(data, g.data, N * K * sizeof(node_t)",
                      "markdown": "`memcpy(data, g.data, N * K * sizeof(node_t)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/NSG.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2012,
                        "charLength": 43
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data, <size of data>,  g.data,  N * K * sizeof(node_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-90d454f6-5bd0-4d95-ae07-9414499d7a54",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 28,
                  "endLine": 230,
                  "endColumn": 38,
                  "charOffset": 6047,
                  "charLength": 10,
                  "snippet": {
                    "text": "strlen(sx)",
                    "rendered": {
                      "text": "strlen(sx)",
                      "markdown": "`strlen(sx)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6047,
                        "charLength": 10
                      },
                      "insertedContent": {
                        "text": "strlen_s(sx, <size of sx>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6047,
                        "charLength": 10
                      },
                      "insertedContent": {
                        "text": "strnlen(sx, <size of sx>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a517dea3-ccbd-40a4-83c5-32bdd70e9ff7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 8,
                  "endLine": 209,
                  "endColumn": 39,
                  "charOffset": 5537,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(buffer.data(), src, nb1)",
                    "rendered": {
                      "text": "memcpy(buffer.data(), src, nb1)",
                      "markdown": "`memcpy(buffer.data(), src, nb1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5537,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer.data(), <size of buffer.data()>,  src,  nb1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8a642b8d-28c9-4590-941f-8bd9e98a4d5d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 8,
                  "endLine": 191,
                  "endColumn": 43,
                  "charOffset": 5005,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(buffer.data() + b0, src, nb)",
                    "rendered": {
                      "text": "memcpy(buffer.data() + b0, src, nb)",
                      "markdown": "`memcpy(buffer.data() + b0, src, nb)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5005,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer.data() + b0, <size of buffer.data() + b0>,  src,  nb)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-df74753d-22cf-44b5-8f11-bce0d9d2b087",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 8,
                  "endLine": 166,
                  "endColumn": 39,
                  "charOffset": 4371,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(dst, buffer.data(), nb2)",
                    "rendered": {
                      "text": "memcpy(dst, buffer.data(), nb2)",
                      "markdown": "`memcpy(dst, buffer.data(), nb2)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4371,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  buffer.data(),  nb2)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d8176f5e-5c31-4a02-bb4d-f2c183c3e82d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 8,
                  "endLine": 145,
                  "endColumn": 43,
                  "charOffset": 3855,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(dst, buffer.data() + b0, nb)",
                    "rendered": {
                      "text": "memcpy(dst, buffer.data() + b0, nb)",
                      "markdown": "`memcpy(dst, buffer.data() + b0, nb)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3855,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  buffer.data() + b0,  nb)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-934d7abb-e117-45d6-ad70-610450fb2d34",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 8,
                  "endLine": 52,
                  "endColumn": 45,
                  "charOffset": 1391,
                  "charLength": 37,
                  "snippet": {
                    "text": "memcpy(ptr, &data[rp], size * nitems)",
                    "rendered": {
                      "text": "memcpy(ptr, &data[rp], size * nitems)",
                      "markdown": "`memcpy(ptr, &data[rp], size * nitems)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1391,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr, <size of ptr>,  &data[rp],  size * nitems)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-837b30f9-1e1c-4e94-a5c7-1185a38fac97",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/io.cpp"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 44,
                  "charOffset": 1068,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(&data[o], ptr, size * nitems)",
                    "rendered": {
                      "text": "memcpy(&data[o], ptr, size * nitems)",
                      "markdown": "`memcpy(&data[o], ptr, size * nitems)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/io.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1068,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&data[o], <size of &data[o]>,  ptr,  size * nitems)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-87e23329-4ff6-4b1a-a2e6-a35ee24adb5a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/kmeans1d.cpp"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 8,
                  "endLine": 197,
                  "endColumn": 43,
                  "charOffset": 5261,
                  "charLength": 35,
                  "snippet": {
                    "text": "memcpy(centroids, x, n * sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(centroids, x, n * sizeof(*x)",
                      "markdown": "`memcpy(centroids, x, n * sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/kmeans1d.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5261,
                        "charLength": 35
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids, <size of centroids>,  x,  n * sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b66d691f-df65-4965-93e1-fba6067e23da",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/LocalSearchQuantizer.cpp"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 16,
                  "endLine": 572,
                  "endColumn": 38,
                  "charOffset": 16108,
                  "charLength": 110,
                  "snippet": {
                    "text": "memcpy(best_codes.data() + i * M,\n                       codes + i * M,\n                       sizeof(int32_t)",
                    "rendered": {
                      "text": "memcpy(best_codes.data() + i * M,\n                       codes + i * M,\n                       sizeof(int32_t)",
                      "markdown": "`memcpy(best_codes.data() + i * M,\n                       codes + i * M,\n                       sizeof(int32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/LocalSearchQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16108,
                        "charLength": 110
                      },
                      "insertedContent": {
                        "text": "memcpy_s(best_codes.data() + i * M, <size of best_codes.data() + i * M>, \n                       codes + i * M, \n                       sizeof(int32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7f291581-6589-479d-9112-0ef96ceadcbf",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/LocalSearchQuantizer.cpp"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 8,
                  "endLine": 579,
                  "endColumn": 56,
                  "charOffset": 16351,
                  "charLength": 48,
                  "snippet": {
                    "text": "memcpy(codes, best_codes.data(), sizeof(int32_t)",
                    "rendered": {
                      "text": "memcpy(codes, best_codes.data(), sizeof(int32_t)",
                      "markdown": "`memcpy(codes, best_codes.data(), sizeof(int32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/LocalSearchQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16351,
                        "charLength": 48
                      },
                      "insertedContent": {
                        "text": "memcpy_s(codes, <size of codes>,  best_codes.data(),  sizeof(int32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0ead4825-b086-45d0-a2e1-421d38bae185",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 16,
                  "endLine": 437,
                  "endColumn": 19,
                  "charOffset": 11925,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11925,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11925,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-f7c8bc73-9b74-4bd0-b1ea-6629180d5def",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 46,
                  "endLine": 426,
                  "endColumn": 49,
                  "charOffset": 11673,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11673,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11673,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-0d325a9c-61cb-4247-8242-98083e22b13a",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 39,
                  "endLine": 424,
                  "endColumn": 42,
                  "charOffset": 11595,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11595,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11595,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-69a4670c-8c1a-437a-b1bf-ca97785fa859",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 40,
                  "endLine": 422,
                  "endColumn": 43,
                  "charOffset": 11540,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11540,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11540,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-88a1da3c-7731-4a74-b158-b6cac7acb7ce",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 44,
                  "endLine": 420,
                  "endColumn": 47,
                  "charOffset": 11484,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11484,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11484,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-66bf1be2-d8e3-4409-8013-3347a295a4c6",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 28,
                  "endLine": 420,
                  "endColumn": 31,
                  "charOffset": 11468,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11468,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11468,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-78e55570-3c86-46e6-846d-5052668c1475",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 24,
                  "endLine": 417,
                  "endColumn": 27,
                  "charOffset": 11406,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11406,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11406,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-b84c8b26-6e42-481e-8887-4e08d5f9b1b8",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 47,
                  "endLine": 360,
                  "endColumn": 50,
                  "charOffset": 9926,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9926,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9926,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-28129e5f-898f-46cf-a9ac-9e6d8950ffdb",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 16,
                  "endLine": 371,
                  "endColumn": 19,
                  "charOffset": 10197,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10197,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10197,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-2ef4c8a2-5e3d-4c21-9d3c-3358edfbb420",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 43,
                  "endLine": 358,
                  "endColumn": 46,
                  "charOffset": 9863,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9863,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9863,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-9d03a74e-06ff-4b99-9a8d-081a78e0b2c3",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 27,
                  "endLine": 358,
                  "endColumn": 30,
                  "charOffset": 9847,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9847,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9847,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-6b8e2474-c7f1-42ee-bf50-1e2d42e64047",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 41,
                  "endLine": 356,
                  "endColumn": 44,
                  "charOffset": 9785,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9785,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9785,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-7e2a0868-95c2-4f2c-8af9-86ac6a6778a9",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 40,
                  "endLine": 354,
                  "endColumn": 43,
                  "charOffset": 9728,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9728,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9728,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-116c591f-c2d8-464c-8c03-a3b68387f368",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 23,
                  "endLine": 351,
                  "endColumn": 26,
                  "charOffset": 9655,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9655,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9655,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-53bf6301-794e-429c-bf9e-617c28991daa",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 28,
                  "endLine": 297,
                  "endColumn": 31,
                  "charOffset": 8052,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8052,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8052,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-28bb30f4-5422-4cb4-a2fe-6cd5b1231cb0",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 47,
                  "endLine": 270,
                  "endColumn": 50,
                  "charOffset": 7413,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7413,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7413,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-190280d0-b8e5-4c1c-8312-56b6592943fe",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 43,
                  "endLine": 268,
                  "endColumn": 46,
                  "charOffset": 7350,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7350,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7350,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-1556a907-e470-4c9b-a8d0-636490f31af1",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 27,
                  "endLine": 268,
                  "endColumn": 30,
                  "charOffset": 7334,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7334,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7334,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-706b285c-8c76-4746-b7ea-737c8a4becba",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 40,
                  "endLine": 266,
                  "endColumn": 43,
                  "charOffset": 7273,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7273,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7273,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-59dc5d51-5d1d-4424-b5dc-715a4556ee26",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 36,
                  "endLine": 264,
                  "endColumn": 39,
                  "charOffset": 7199,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7199,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7199,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-ebf0fe8e-3840-4139-91c0-f87b08cf5ec7",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 40,
                  "endLine": 262,
                  "endColumn": 43,
                  "charOffset": 7147,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7147,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7147,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-16f6f1d4-086c-4d26-b0e3-7e3b0e2b43aa",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 23,
                  "endLine": 259,
                  "endColumn": 26,
                  "charOffset": 7074,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7074,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7074,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-fc9b4430-ddc0-487d-b36a-41ff56e43200",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 30,
                  "endLine": 155,
                  "endColumn": 33,
                  "charOffset": 3954,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3954,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3954,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-4fab9cdf-ae68-4fb6-aacc-ddec06a60a21",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 29,
                  "endLine": 150,
                  "endColumn": 32,
                  "charOffset": 3807,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3807,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3807,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-3c8ca8f8-e577-4cee-b934-058b72f796b6",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 29,
                  "endLine": 146,
                  "endColumn": 32,
                  "charOffset": 3688,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3688,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3688,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-790118c8-fbef-4686-9759-7d34f7377fac",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 49,
                  "endLine": 87,
                  "endColumn": 52,
                  "charOffset": 2108,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2108,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2108,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-e417c4d6-173f-4c9b-b4cb-5e14c75b6a9d",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 28,
                  "endLine": 85,
                  "endColumn": 31,
                  "charOffset": 2027,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2027,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2027,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-f49221d5-e702-4413-9299-884adc131846",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 44,
                  "endLine": 85,
                  "endColumn": 47,
                  "charOffset": 2043,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2043,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2043,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-938bf1cc-9f8d-4aa8-b520-fdb6012b6526",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 42,
                  "endLine": 83,
                  "endColumn": 45,
                  "charOffset": 1964,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1964,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1964,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-aa6922ea-251f-4549-bc05-a624305a581c",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 37,
                  "endLine": 81,
                  "endColumn": 40,
                  "charOffset": 1887,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1887,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1887,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-df34c53a-59bd-4f5b-80cd-f1afba131559",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 41,
                  "endLine": 79,
                  "endColumn": 44,
                  "charOffset": 1834,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1834,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1834,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-d9a8a4cf-78a5-47dc-a7bb-1d3bba911368",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 24,
                  "endLine": 76,
                  "endColumn": 27,
                  "charOffset": 1759,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1759,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1759,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-7c79e296-f2e6-4c05-a1b9-4edba571ed0d",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 15,
                  "endLine": 40,
                  "endColumn": 18,
                  "charOffset": 942,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 942,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 942,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-b235cae4-fbd6-4646-837e-472551f02aa2",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 15,
                  "endLine": 38,
                  "endColumn": 18,
                  "charOffset": 897,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 897,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 897,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-5b408525-a486-45d6-ae93-aaf550eb760b",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 15,
                  "endLine": 36,
                  "endColumn": 18,
                  "charOffset": 851,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 851,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 851,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-4301de54-1e21-4ebd-86ae-b3a798581bd9",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 6,
                  "endLine": 34,
                  "endColumn": 9,
                  "charOffset": 821,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 821,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 821,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-d84ec34f-fa2f-4caf-a0ae-b22fab896583",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 1511,
                  "startColumn": 8,
                  "endLine": 1513,
                  "endColumn": 54,
                  "charOffset": 48723,
                  "charLength": 106,
                  "snippet": {
                    "text": "memcpy(out_distances,\n               distances_ptr,\n               distances_size * sizeof(*distances_ptr)",
                    "rendered": {
                      "text": "memcpy(out_distances,\n               distances_ptr,\n               distances_size * sizeof(*distances_ptr)",
                      "markdown": "`memcpy(out_distances,\n               distances_ptr,\n               distances_size * sizeof(*distances_ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 48723,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_distances, <size of out_distances>, \n               distances_ptr, \n               distances_size * sizeof(*distances_ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7d5d6a1e-9318-49b6-bd05-8a3dbf8dad38",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 1385,
                  "startColumn": 16,
                  "endLine": 1385,
                  "endColumn": 68,
                  "charOffset": 44706,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                    "rendered": {
                      "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                      "markdown": "`memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 44706,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_codes_i, <size of new_codes_i>,  codes_i + js * m,  sizeof(*codes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e3e6d72a-240c-4572-b658-f803daf89e88",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 1505,
                  "startColumn": 8,
                  "endLine": 1505,
                  "endColumn": 68,
                  "charOffset": 48492,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)",
                    "rendered": {
                      "text": "memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)",
                      "markdown": "`memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 48492,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_codes, <size of out_codes>,  codes_ptr,  codes_size * sizeof(*codes_ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5d4e3d8b-5e40-4ef8-bab5-619fe28cacaa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 8,
                  "endLine": 934,
                  "endColumn": 57,
                  "charOffset": 29070,
                  "charLength": 117,
                  "snippet": {
                    "text": "memcpy(out_distances,\n               pool.distances.data(),\n               distances_size * sizeof(pool.distances[0])",
                    "rendered": {
                      "text": "memcpy(out_distances,\n               pool.distances.data(),\n               distances_size * sizeof(pool.distances[0])",
                      "markdown": "`memcpy(out_distances,\n               pool.distances.data(),\n               distances_size * sizeof(pool.distances[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29070,
                        "charLength": 117
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_distances, <size of out_distances>, \n               pool.distances.data(), \n               distances_size * sizeof(pool.distances[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c0332cfd-3edb-426d-819c-2fb8f41644aa",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_avx2.h"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 12,
                  "charOffset": 747,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 747,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_avx2.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 747,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-604098a4-6f0d-49c4-9071-f49b4af9d9e2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 8,
                  "endLine": 926,
                  "endColumn": 54,
                  "charOffset": 28793,
                  "charLength": 106,
                  "snippet": {
                    "text": "memcpy(out_residuals,\n               residuals_ptr,\n               residuals_size * sizeof(*residuals_ptr)",
                    "rendered": {
                      "text": "memcpy(out_residuals,\n               residuals_ptr,\n               residuals_size * sizeof(*residuals_ptr)",
                      "markdown": "`memcpy(out_residuals,\n               residuals_ptr,\n               residuals_size * sizeof(*residuals_ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28793,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_residuals, <size of out_residuals>, \n               residuals_ptr, \n               residuals_size * sizeof(*residuals_ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c64162db-d211-4a50-bdf3-6f92d15c11db",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 918,
                  "startColumn": 8,
                  "endLine": 918,
                  "endColumn": 68,
                  "charOffset": 28562,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)",
                    "rendered": {
                      "text": "memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)",
                      "markdown": "`memcpy(out_codes, codes_ptr, codes_size * sizeof(*codes_ptr)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28562,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out_codes, <size of out_codes>,  codes_ptr,  codes_size * sizeof(*codes_ptr)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0242da4d-8d51-405f-93c8-d0b15cb00a62",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 8,
                  "endLine": 347,
                  "endColumn": 31,
                  "charOffset": 11121,
                  "charLength": 121,
                  "snippet": {
                    "text": "memcpy(this->codebooks.data() + codebook_offsets[m] * d,\n               codebooks.data(),\n               codebooks.size()",
                    "rendered": {
                      "text": "memcpy(this->codebooks.data() + codebook_offsets[m] * d,\n               codebooks.data(),\n               codebooks.size()",
                      "markdown": "`memcpy(this->codebooks.data() + codebook_offsets[m] * d,\n               codebooks.data(),\n               codebooks.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11121,
                        "charLength": 121
                      },
                      "insertedContent": {
                        "text": "memcpy_s(this->codebooks.data() + codebook_offsets[m] * d, <size of this->codebooks.data() + codebook_offsets[m] * d>, \n               codebooks.data(), \n               codebooks.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6113fc99-0075-4b55-9f8b-1e264aab1ae9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 16,
                  "endLine": 308,
                  "endColumn": 43,
                  "charOffset": 9668,
                  "charLength": 142,
                  "snippet": {
                    "text": "memcpy(residuals1.data() + j * d,\n                       residuals.data() + j * d * cur_beam_size,\n                       sizeof(residuals[0])",
                    "rendered": {
                      "text": "memcpy(residuals1.data() + j * d,\n                       residuals.data() + j * d * cur_beam_size,\n                       sizeof(residuals[0])",
                      "markdown": "`memcpy(residuals1.data() + j * d,\n                       residuals.data() + j * d * cur_beam_size,\n                       sizeof(residuals[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9668,
                        "charLength": 142
                      },
                      "insertedContent": {
                        "text": "memcpy_s(residuals1.data() + j * d, <size of residuals1.data() + j * d>, \n                       residuals.data() + j * d * cur_beam_size, \n                       sizeof(residuals[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bdf71a4d-dc89-4bfa-893b-335603553a8b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 20,
                  "endLine": 265,
                  "endColumn": 72,
                  "charOffset": 8434,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                    "rendered": {
                      "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                      "markdown": "`memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8434,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_codes_i, <size of new_codes_i>,  codes_i + js * m,  sizeof(*codes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f6ef6840-770d-455a-9453-8015ca08715a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 20,
                  "endLine": 211,
                  "endColumn": 72,
                  "charOffset": 6304,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                    "rendered": {
                      "text": "memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)",
                      "markdown": "`memcpy(new_codes_i, codes_i + js * m, sizeof(*codes)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6304,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_codes_i, <size of new_codes_i>,  codes_i + js * m,  sizeof(*codes)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-665f8108-94d2-4819-a4e0-e2c96d843446",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 8,
                  "endLine": 123,
                  "endColumn": 31,
                  "charOffset": 2857,
                  "charLength": 132,
                  "snippet": {
                    "text": "memcpy(codebooks.data(),\n               other.codebooks.data() + other.codebook_offsets[skip_M] * d,\n               codebooks.size()",
                    "rendered": {
                      "text": "memcpy(codebooks.data(),\n               other.codebooks.data() + other.codebook_offsets[skip_M] * d,\n               codebooks.size()",
                      "markdown": "`memcpy(codebooks.data(),\n               other.codebooks.data() + other.codebook_offsets[skip_M] * d,\n               codebooks.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2857,
                        "charLength": 132
                      },
                      "insertedContent": {
                        "text": "memcpy_s(codebooks.data(), <size of codebooks.data()>, \n               other.codebooks.data() + other.codebook_offsets[skip_M] * d, \n               codebooks.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0a2aa198-758e-461e-aafd-e6b337e8cb93",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 4,
                  "endLine": 113,
                  "endColumn": 23,
                  "charOffset": 2518,
                  "charLength": 84,
                  "snippet": {
                    "text": "memcpy(nbits.data(),\n           other.nbits.data() + skip_M,\n           nbits.size()",
                    "rendered": {
                      "text": "memcpy(nbits.data(),\n           other.nbits.data() + skip_M,\n           nbits.size()",
                      "markdown": "`memcpy(nbits.data(),\n           other.nbits.data() + skip_M,\n           nbits.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2518,
                        "charLength": 84
                      },
                      "insertedContent": {
                        "text": "memcpy_s(nbits.data(), <size of nbits.data()>, \n           other.nbits.data() + skip_M, \n           nbits.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9b4cb899-9658-4656-94b0-04cca9783932",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ResidualQuantizer.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 24,
                  "charOffset": 1070,
                  "charLength": 21,
                  "snippet": {
                    "text": "http://www.netlib.org",
                    "rendered": {
                      "text": "http://www.netlib.org",
                      "markdown": "`http://www.netlib.org`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ResidualQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1070,
                        "charLength": 21
                      },
                      "insertedContent": {
                        "text": "https://www.netlib.org"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-d9775ec4-f219-442b-a042-5c00ed4c6e08",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductQuantizer.cpp"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 16,
                  "endLine": 356,
                  "endColumn": 43,
                  "charOffset": 10541,
                  "charLength": 121,
                  "snippet": {
                    "text": "memcpy(xslice + (i - i0) * dsub,\n                       x + i * d + m * dsub,\n                       dsub * sizeof(float)",
                    "rendered": {
                      "text": "memcpy(xslice + (i - i0) * dsub,\n                       x + i * d + m * dsub,\n                       dsub * sizeof(float)",
                      "markdown": "`memcpy(xslice + (i - i0) * dsub,\n                       x + i * d + m * dsub,\n                       dsub * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10541,
                        "charLength": 121
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xslice + (i - i0) * dsub, <size of xslice + (i - i0) * dsub>, \n                       x + i * d + m * dsub, \n                       dsub * sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2db9fcdd-c9e7-4d9b-a5ee-0c25e8532a98",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductQuantizer.cpp"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 8,
                  "endLine": 287,
                  "endColumn": 37,
                  "charOffset": 8690,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(x + m * pq.dsub,\n               pq.get_centroids(m, c)",
                    "rendered": {
                      "text": "memcpy(x + m * pq.dsub,\n               pq.get_centroids(m, c)",
                      "markdown": "`memcpy(x + m * pq.dsub,\n               pq.get_centroids(m, c)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8690,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x + m * pq.dsub, <size of x + m * pq.dsub>, \n               pq.get_centroids(m,  c)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bb8fbf4f-b571-464c-b69e-848972eb5c95",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductQuantizer.cpp"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 20,
                  "endLine": 164,
                  "endColumn": 46,
                  "charOffset": 4588,
                  "charLength": 76,
                  "snippet": {
                    "text": "memcpy(clus.centroids.data(),\n                           get_centroids(m, 0)",
                    "rendered": {
                      "text": "memcpy(clus.centroids.data(),\n                           get_centroids(m, 0)",
                      "markdown": "`memcpy(clus.centroids.data(),\n                           get_centroids(m, 0)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4588,
                        "charLength": 76
                      },
                      "insertedContent": {
                        "text": "memcpy_s(clus.centroids.data(), <size of clus.centroids.data()>, \n                           get_centroids(m,  0)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9afcd993-fec3-4619-b094-595baf8cb716",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/ProductQuantizer.cpp"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 16,
                  "endLine": 144,
                  "endColumn": 43,
                  "charOffset": 3783,
                  "charLength": 114,
                  "snippet": {
                    "text": "memcpy(xslice + j * dsub,\n                       x + j * d + m * dsub,\n                       dsub * sizeof(float)",
                    "rendered": {
                      "text": "memcpy(xslice + j * dsub,\n                       x + j * d + m * dsub,\n                       dsub * sizeof(float)",
                      "markdown": "`memcpy(xslice + j * dsub,\n                       x + j * d + m * dsub,\n                       dsub * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/ProductQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3783,
                        "charLength": 114
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xslice + j * dsub, <size of xslice + j * dsub>, \n                       x + j * d + m * dsub, \n                       dsub * sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-05aa5564-b75f-4c08-a2ba-8d89898d8b96",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/gpu/GpuAutoTune.cpp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 47,
                  "endLine": 103,
                  "endColumn": 67,
                  "charOffset": 2867,
                  "charLength": 20,
                  "snippet": {
                    "text": "strlen(\"quantizer_\")",
                    "rendered": {
                      "text": "strlen(\"quantizer_\")",
                      "markdown": "`strlen(\"quantizer_\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/gpu/GpuAutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2867,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/gpu/GpuAutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2867,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strnlen(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-37c3126a-79e3-4dc8-9417-26b6215c450b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IVFlib.cpp"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 4,
                  "endLine": 187,
                  "endColumn": 60,
                  "charOffset": 5802,
                  "charLength": 56,
                  "snippet": {
                    "text": "memcpy(dst.data() + insert_point, src.data(), src.size()",
                    "rendered": {
                      "text": "memcpy(dst.data() + insert_point, src.data(), src.size()",
                      "markdown": "`memcpy(dst.data() + insert_point, src.data(), src.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IVFlib.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5802,
                        "charLength": 56
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst.data() + insert_point, <size of dst.data() + insert_point>,  src.data(),  src.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-685e068a-905b-4fd0-bbce-84c11d2227dc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/utils.cpp"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 8,
                  "endLine": 457,
                  "endColumn": 72,
                  "charOffset": 11147,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(&x_subset[i * d], &x[subset[i] * size_t(d)], sizeof(x[0])",
                    "rendered": {
                      "text": "memcpy(&x_subset[i * d], &x[subset[i] * size_t(d)], sizeof(x[0])",
                      "markdown": "`memcpy(&x_subset[i * d], &x[subset[i] * size_t(d)], sizeof(x[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/utils.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11147,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&x_subset[i * d], <size of &x_subset[i * d]>,  &x[subset[i] * size_t(d)],  sizeof(x[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5c81244b-e35c-479f-9464-cb6c9f8ab235",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/utils.cpp"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 4,
                  "endLine": 339,
                  "endColumn": 37,
                  "charOffset": 8143,
                  "charLength": 33,
                  "snippet": {
                    "text": "memcpy(v2, v2_in, sizeof(int64_t)",
                    "rendered": {
                      "text": "memcpy(v2, v2_in, sizeof(int64_t)",
                      "markdown": "`memcpy(v2, v2_in, sizeof(int64_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/utils.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8143,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "memcpy_s(v2, <size of v2>,  v2_in,  sizeof(int64_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f157481d-2e9d-449b-b888-80509a1f99f9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/utils.cpp"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 12,
                  "endLine": 324,
                  "endColumn": 51,
                  "charOffset": 7812,
                  "charLength": 39,
                  "snippet": {
                    "text": "memcpy(lI0, tmpI.data(), sizeof(lI0[0])",
                    "rendered": {
                      "text": "memcpy(lI0, tmpI.data(), sizeof(lI0[0])",
                      "markdown": "`memcpy(lI0, tmpI.data(), sizeof(lI0[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/utils.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7812,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "memcpy_s(lI0, <size of lI0>,  tmpI.data(),  sizeof(lI0[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4eb54eb6-7395-406a-874d-9b1c2dbb4efd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/utils.cpp"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 12,
                  "endLine": 323,
                  "endColumn": 51,
                  "charOffset": 7754,
                  "charLength": 39,
                  "snippet": {
                    "text": "memcpy(lD0, tmpD.data(), sizeof(lD0[0])",
                    "rendered": {
                      "text": "memcpy(lD0, tmpD.data(), sizeof(lD0[0])",
                      "markdown": "`memcpy(lD0, tmpD.data(), sizeof(lD0[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/utils.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7754,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "memcpy_s(lD0, <size of lD0>,  tmpD.data(),  sizeof(lD0[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8b954584-6ad9-4a5d-a503-dbc44ac6fedc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexAdditiveQuantizerFastScan.cpp"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 12,
                  "endLine": 182,
                  "endColumn": 59,
                  "charOffset": 5299,
                  "charLength": 47,
                  "snippet": {
                    "text": "memcpy(lut, norm_lut, norm_dim12 * sizeof(*lut)",
                    "rendered": {
                      "text": "memcpy(lut, norm_lut, norm_dim12 * sizeof(*lut)",
                      "markdown": "`memcpy(lut, norm_lut, norm_dim12 * sizeof(*lut)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexAdditiveQuantizerFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5299,
                        "charLength": 47
                      },
                      "insertedContent": {
                        "text": "memcpy_s(lut, <size of lut>,  norm_lut,  norm_dim12 * sizeof(*lut)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5cc14d19-531b-4f2e-8ed1-43d67a004aeb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexAdditiveQuantizerFastScan.cpp"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 12,
                  "endLine": 180,
                  "endColumn": 77,
                  "charOffset": 5190,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(lut, ip_lut.data() + i * ip_dim12, ip_dim12 * sizeof(*lut)",
                    "rendered": {
                      "text": "memcpy(lut, ip_lut.data() + i * ip_dim12, ip_dim12 * sizeof(*lut)",
                      "markdown": "`memcpy(lut, ip_lut.data() + i * ip_dim12, ip_dim12 * sizeof(*lut)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexAdditiveQuantizerFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5190,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(lut, <size of lut>,  ip_lut.data() + i * ip_dim12,  ip_dim12 * sizeof(*lut)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7e2381bf-76f0-4f54-8fe8-6908bd360f1d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFastScan.cpp"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 12,
                  "endLine": 171,
                  "endColumn": 29,
                  "charOffset": 4748,
                  "charLength": 139,
                  "snippet": {
                    "text": "memcpy(list_codes.data() + (i - i0) * code_size,\n                   flat_codes.data() + order[i] * code_size,\n                   code_size)",
                    "rendered": {
                      "text": "memcpy(list_codes.data() + (i - i0) * code_size,\n                   flat_codes.data() + order[i] * code_size,\n                   code_size)",
                      "markdown": "`memcpy(list_codes.data() + (i - i0) * code_size,\n                   flat_codes.data() + order[i] * code_size,\n                   code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4748,
                        "charLength": 139
                      },
                      "insertedContent": {
                        "text": "memcpy_s(list_codes.data() + (i - i0) * code_size, <size of list_codes.data() + (i - i0) * code_size>, \n                   flat_codes.data() + order[i] * code_size, \n                   code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-de1baea2-eadc-4a71-8961-f29222afb093",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/BlockInvertedLists.cpp"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 4,
                  "endLine": 52,
                  "endColumn": 54,
                  "charOffset": 1419,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])",
                    "rendered": {
                      "text": "memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])",
                      "markdown": "`memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/BlockInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1419,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&ids[list_no][o], <size of &ids[list_no][o]>,  ids_in,  sizeof(ids_in[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d1576f86-1415-4898-9023-89721abdc7fe",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/BlockInvertedLists.cpp"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 8,
                  "endLine": 57,
                  "endColumn": 74,
                  "charOffset": 1667,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(&codes[list_no][o * code_size], code, n_block * block_size)",
                    "rendered": {
                      "text": "memcpy(&codes[list_no][o * code_size], code, n_block * block_size)",
                      "markdown": "`memcpy(&codes[list_no][o * code_size], code, n_block * block_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/BlockInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1667,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&codes[list_no][o * code_size], <size of &codes[list_no][o * code_size]>,  code,  n_block * block_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7f1613e3-fb86-4f3f-8780-84361cd84207",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 4,
                  "endLine": 648,
                  "endColumn": 50,
                  "charOffset": 17839,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(new_lists.data(), &lists[l0], (l1 - l0)",
                    "rendered": {
                      "text": "memcpy(new_lists.data(), &lists[l0], (l1 - l0)",
                      "markdown": "`memcpy(new_lists.data(), &lists[l0], (l1 - l0)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17839,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_lists.data(), <size of new_lists.data()>,  &lists[l0],  (l1 - l0)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-41e26e41-1c8a-4d77-88f2-a39b988ca6f2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 12,
                  "endLine": 473,
                  "endColumn": 36,
                  "charOffset": 13270,
                  "charLength": 129,
                  "snippet": {
                    "text": "memcpy(ptr + new_l.offset + new_l.capacity * code_size,\n                   get_ids(list_no),\n                   n * sizeof(idx_t)",
                    "rendered": {
                      "text": "memcpy(ptr + new_l.offset + new_l.capacity * code_size,\n                   get_ids(list_no),\n                   n * sizeof(idx_t)",
                      "markdown": "`memcpy(ptr + new_l.offset + new_l.capacity * code_size,\n                   get_ids(list_no),\n                   n * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13270,
                        "charLength": 129
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr + new_l.offset + new_l.capacity * code_size, <size of ptr + new_l.offset + new_l.capacity * code_size>, \n                   get_ids(list_no), \n                   n * sizeof(idx_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-98432006-1ca9-44d9-bfb5-39f55e17484e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 12,
                  "endLine": 470,
                  "endColumn": 73,
                  "charOffset": 13195,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(ptr + new_l.offset, get_codes(list_no), n * code_size)",
                    "rendered": {
                      "text": "memcpy(ptr + new_l.offset, get_codes(list_no), n * code_size)",
                      "markdown": "`memcpy(ptr + new_l.offset, get_codes(list_no), n * code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13195,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr + new_l.offset, <size of ptr + new_l.offset>,  get_codes(list_no),  n * code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f25ed186-1bfe-4640-a706-1a5304ab607e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 4,
                  "endLine": 415,
                  "endColumn": 69,
                  "charOffset": 11721,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(codes + offset * code_size, codes_in, code_size * n_entry)",
                    "rendered": {
                      "text": "memcpy(codes + offset * code_size, codes_in, code_size * n_entry)",
                      "markdown": "`memcpy(codes + offset * code_size, codes_in, code_size * n_entry)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11721,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(codes + offset * code_size, <size of codes + offset * code_size>,  codes_in,  code_size * n_entry)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-db267679-6807-4e43-8550-ca530f33525f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 4,
                  "endLine": 413,
                  "endColumn": 50,
                  "charOffset": 11595,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(ids + offset, ids_in, sizeof(ids_in[0])",
                    "rendered": {
                      "text": "memcpy(ids + offset, ids_in, sizeof(ids_in[0])",
                      "markdown": "`memcpy(ids + offset, ids_in, sizeof(ids_in[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/OnDiskInvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11595,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ids + offset, <size of ids + offset>,  ids_in,  sizeof(ids_in[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2c365b6d-2926-4fe9-993f-f3896013ec39",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexBinaryIVF.cpp"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 4,
                  "endLine": 232,
                  "endColumn": 61,
                  "charOffset": 6617,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(recons, invlists->get_single_code(list_no, offset)",
                    "rendered": {
                      "text": "memcpy(recons, invlists->get_single_code(list_no, offset)",
                      "markdown": "`memcpy(recons, invlists->get_single_code(list_no, offset)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexBinaryIVF.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6617,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(recons, <size of recons>,  invlists->get_single_code(list_no,  offset)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1a2c5011-4977-4746-88b7-adddd1570d5b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/sorting.cpp"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 12,
                  "endLine": 519,
                  "endColumn": 53,
                  "charOffset": 15120,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(ptrs.data(), lims, sizeof(lims[0])",
                    "rendered": {
                      "text": "memcpy(ptrs.data(), lims, sizeof(lims[0])",
                      "markdown": "`memcpy(ptrs.data(), lims, sizeof(lims[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/sorting.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15120,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs.data(), <size of ptrs.data()>,  lims,  sizeof(lims[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-996a5f9a-9ba7-4bb7-90cd-83b641012f23",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/sorting.cpp"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 16,
                  "endLine": 183,
                  "endColumn": 36,
                  "charOffset": 5052,
                  "charLength": 106,
                  "snippet": {
                    "text": "memcpy(permB + segs[s].i0,\n                       permA + segs[s].i0,\n                       segs[s].len()",
                    "rendered": {
                      "text": "memcpy(permB + segs[s].i0,\n                       permA + segs[s].i0,\n                       segs[s].len()",
                      "markdown": "`memcpy(permB + segs[s].i0,\n                       permA + segs[s].i0,\n                       segs[s].len()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/sorting.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5052,
                        "charLength": 106
                      },
                      "insertedContent": {
                        "text": "memcpy_s(permB + segs[s].i0, <size of permB + segs[s].i0>, \n                       permA + segs[s].i0, \n                       segs[s].len()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a27550a4-5232-48a9-aed9-a339b97bc27f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/sorting.cpp"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 12,
                  "endLine": 121,
                  "endColumn": 55,
                  "charOffset": 3439,
                  "charLength": 43,
                  "snippet": {
                    "text": "memcpy(dst + sw.i0, src + s2t.i0, s2t.len()",
                    "rendered": {
                      "text": "memcpy(dst + sw.i0, src + s2t.i0, s2t.len()",
                      "markdown": "`memcpy(dst + sw.i0, src + s2t.i0, s2t.len()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/sorting.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3439,
                        "charLength": 43
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst + sw.i0, <size of dst + sw.i0>,  src + s2t.i0,  s2t.len()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-23a662f7-52d0-402b-ad72-822f2496b8bb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/sorting.cpp"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 12,
                  "endLine": 118,
                  "endColumn": 55,
                  "charOffset": 3285,
                  "charLength": 43,
                  "snippet": {
                    "text": "memcpy(dst + sw.i0, src + s1t.i0, s1t.len()",
                    "rendered": {
                      "text": "memcpy(dst + sw.i0, src + s1t.i0, s1t.len()",
                      "markdown": "`memcpy(dst + sw.i0, src + s1t.i0, s1t.len()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/sorting.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3285,
                        "charLength": 43
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst + sw.i0, <size of dst + sw.i0>,  src + s1t.i0,  s1t.len()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d6d9f6d4-53c3-4f7b-90bf-2aa3a13666ea",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Index2Layer.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 8,
                  "endLine": 229,
                  "endColumn": 49,
                  "charOffset": 6001,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(&key01, code, storage.code_size_1)",
                    "rendered": {
                      "text": "memcpy(&key01, code, storage.code_size_1)",
                      "markdown": "`memcpy(&key01, code, storage.code_size_1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Index2Layer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6001,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&key01, <size of &key01>,  code,  storage.code_size_1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7a4a63a4-f094-4214-a306-d15bcfd60850",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Index2Layer.cpp"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 8,
                  "endLine": 183,
                  "endColumn": 47,
                  "charOffset": 4531,
                  "charLength": 39,
                  "snippet": {
                    "text": "memcpy(&key, code, storage.code_size_1)",
                    "rendered": {
                      "text": "memcpy(&key, code, storage.code_size_1)",
                      "markdown": "`memcpy(&key, code, storage.code_size_1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Index2Layer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4531,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&key, <size of &key>,  code,  storage.code_size_1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-740267a1-2cf9-4c4c-9533-1bcf5fa46760",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Index2Layer.cpp"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 8,
                  "endLine": 128,
                  "endColumn": 37,
                  "charOffset": 3111,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(&key, rp, code_size_1)",
                    "rendered": {
                      "text": "memcpy(&key, rp, code_size_1)",
                      "markdown": "`memcpy(&key, rp, code_size_1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Index2Layer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3111,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&key, <size of &key>,  rp,  code_size_1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2cd63b03-eb4f-456e-a14b-da47f47fbb19",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 12,
                  "endLine": 382,
                  "endColumn": 44,
                  "charOffset": 11409,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(c, ScopedIds(il, list_no)",
                    "rendered": {
                      "text": "memcpy(c, ScopedIds(il, list_no)",
                      "markdown": "`memcpy(c, ScopedIds(il, list_no)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11409,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(c, <size of c>,  ScopedIds(il,  list_no)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7855c750-6eaf-4fce-a56a-db0804f695bf",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 4,
                  "endLine": 285,
                  "endColumn": 78,
                  "charOffset": 8461,
                  "charLength": 74,
                  "snippet": {
                    "text": "memcpy(&codes[list_no][offset * code_size], codes_in, code_size * n_entry)",
                    "rendered": {
                      "text": "memcpy(&codes[list_no][offset * code_size], codes_in, code_size * n_entry)",
                      "markdown": "`memcpy(&codes[list_no][offset * code_size], codes_in, code_size * n_entry)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8461,
                        "charLength": 74
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&codes[list_no][offset * code_size], <size of &codes[list_no][offset * code_size]>,  codes_in,  code_size * n_entry)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-36599ea6-b8a1-45da-b5ef-cdd3e5b5ab5e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 4,
                  "endLine": 284,
                  "endColumn": 59,
                  "charOffset": 8389,
                  "charLength": 55,
                  "snippet": {
                    "text": "memcpy(&ids[list_no][offset], ids_in, sizeof(ids_in[0])",
                    "rendered": {
                      "text": "memcpy(&ids[list_no][offset], ids_in, sizeof(ids_in[0])",
                      "markdown": "`memcpy(&ids[list_no][offset], ids_in, sizeof(ids_in[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8389,
                        "charLength": 55
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&ids[list_no][offset], <size of &ids[list_no][offset]>,  ids_in,  sizeof(ids_in[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-da68bc08-a504-4898-b44a-0eb8821836fc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 12,
                  "endLine": 347,
                  "endColumn": 46,
                  "charOffset": 10324,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(c, ScopedCodes(il, list_no)",
                    "rendered": {
                      "text": "memcpy(c, ScopedCodes(il, list_no)",
                      "markdown": "`memcpy(c, ScopedCodes(il, list_no)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10324,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(c, <size of c>,  ScopedCodes(il,  list_no)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1f858f30-40ab-4bd9-8ebd-06425bd53f66",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 4,
                  "endLine": 252,
                  "endColumn": 69,
                  "charOffset": 7500,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(&codes[list_no][o * code_size], code, code_size * n_entry)",
                    "rendered": {
                      "text": "memcpy(&codes[list_no][o * code_size], code, code_size * n_entry)",
                      "markdown": "`memcpy(&codes[list_no][o * code_size], code, code_size * n_entry)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7500,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&codes[list_no][o * code_size], <size of &codes[list_no][o * code_size]>,  code,  code_size * n_entry)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d6ecf55a-2778-41a8-98f3-3e487f02fc00",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/invlists/InvertedLists.cpp"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 4,
                  "endLine": 250,
                  "endColumn": 54,
                  "charOffset": 7379,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])",
                    "rendered": {
                      "text": "memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])",
                      "markdown": "`memcpy(&ids[list_no][o], ids_in, sizeof(ids_in[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/invlists/InvertedLists.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7379,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&ids[list_no][o], <size of &ids[list_no][o]>,  ids_in,  sizeof(ids_in[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c25e8eaa-525d-4839-adb3-51d6163be5fe",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFAdditiveQuantizerFastScan.cpp"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 12,
                  "endLine": 463,
                  "endColumn": 59,
                  "charOffset": 13522,
                  "charLength": 47,
                  "snippet": {
                    "text": "memcpy(tab, norm_lut, norm_dim12 * sizeof(*tab)",
                    "rendered": {
                      "text": "memcpy(tab, norm_lut, norm_dim12 * sizeof(*tab)",
                      "markdown": "`memcpy(tab, norm_lut, norm_dim12 * sizeof(*tab)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFAdditiveQuantizerFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13522,
                        "charLength": 47
                      },
                      "insertedContent": {
                        "text": "memcpy_s(tab, <size of tab>,  norm_lut,  norm_dim12 * sizeof(*tab)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-67cab4c9-f796-47aa-b4f3-7e65817bbd1c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFPQFastScan.cpp"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 12,
                  "endLine": 304,
                  "endColumn": 58,
                  "charOffset": 8903,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(biases.get(), coarse_dis, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(biases.get(), coarse_dis, sizeof(float)",
                      "markdown": "`memcpy(biases.get(), coarse_dis, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFPQFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8903,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(biases.get(), <size of biases.get()>,  coarse_dis,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2c9fcb4a-9c44-43d3-8cc3-01bf53bc8b32",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFPQFastScan.cpp"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 16,
                  "endLine": 250,
                  "endColumn": 62,
                  "charOffset": 6722,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(biases.get(), coarse_dis, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(biases.get(), coarse_dis, sizeof(float)",
                      "markdown": "`memcpy(biases.get(), coarse_dis, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFPQFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6722,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(biases.get(), <size of biases.get()>,  coarse_dis,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2242d8c4-2d79-4f24-9245-a29c6e16dd8e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFPQFastScan.cpp"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 8,
                  "endLine": 80,
                  "endColumn": 41,
                  "charOffset": 1954,
                  "charLength": 119,
                  "snippet": {
                    "text": "memcpy(precomputed_table.get(),\n               orig.precomputed_table.data(),\n               precomputed_table.nbytes()",
                    "rendered": {
                      "text": "memcpy(precomputed_table.get(),\n               orig.precomputed_table.data(),\n               precomputed_table.nbytes()",
                      "markdown": "`memcpy(precomputed_table.get(),\n               orig.precomputed_table.data(),\n               precomputed_table.nbytes()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFPQFastScan.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1954,
                        "charLength": 119
                      },
                      "insertedContent": {
                        "text": "memcpy_s(precomputed_table.get(), <size of precomputed_table.get()>, \n               orig.precomputed_table.data(), \n               precomputed_table.nbytes()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0c768f07-41da-4432-985d-c503b8dc167e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexLSH.cpp"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 12,
                  "endLine": 175,
                  "endColumn": 67,
                  "charOffset": 4876,
                  "charLength": 55,
                  "snippet": {
                    "text": "memcpy(x + i * d, xt + i * nbits, nbits * sizeof(xt[0])",
                    "rendered": {
                      "text": "memcpy(x + i * d, xt + i * nbits, nbits * sizeof(xt[0])",
                      "markdown": "`memcpy(x + i * d, xt + i * nbits, nbits * sizeof(xt[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexLSH.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4876,
                        "charLength": 55
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x + i * d, <size of x + i * d>,  xt + i * nbits,  nbits * sizeof(xt[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1d11ed96-5a47-40a1-b650-0a73190b9eb3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexLSH.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 12,
                  "endLine": 61,
                  "endColumn": 36,
                  "charOffset": 1611,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(xt, x, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xt, x, sizeof(*x)",
                      "markdown": "`memcpy(xt, x, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexLSH.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1611,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xt, <size of xt>,  x,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ed8e1d5d-7db8-4403-90d9-43773ef5e24e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 8,
                  "endLine": 628,
                  "endColumn": 39,
                  "charOffset": 18842,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(dest, src, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(dest, src, sizeof(float)",
                      "markdown": "`memcpy(dest, src, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18842,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest, <size of dest>,  src,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-51d86574-abaa-42fd-b1d2-5a2e4e1bc9ca",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 4,
                  "endLine": 597,
                  "endColumn": 63,
                  "charOffset": 17742,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(centroids, clus.centroids.data(), sizeof(*centroids)",
                    "rendered": {
                      "text": "memcpy(centroids, clus.centroids.data(), sizeof(*centroids)",
                      "markdown": "`memcpy(centroids, clus.centroids.data(), sizeof(*centroids)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17742,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids, <size of centroids>,  clus.centroids.data(),  sizeof(*centroids)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-04f0deb5-d928-4a78-8622-7aed9f92b8b8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 16,
                  "endLine": 416,
                  "endColumn": 77,
                  "charOffset": 12335,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(&centroids[i * d], x + perm[i] * line_size, line_size)",
                    "rendered": {
                      "text": "memcpy(&centroids[i * d], x + perm[i] * line_size, line_size)",
                      "markdown": "`memcpy(&centroids[i * d], x + perm[i] * line_size, line_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12335,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&centroids[i * d], <size of &centroids[i * d]>,  x + perm[i] * line_size,  line_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4b62fa46-3624-4fe5-96e4-333d640f5808",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 12,
                  "endLine": 342,
                  "endColumn": 56,
                  "charOffset": 9983,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(centroids.data(), x_in, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(centroids.data(), x_in, sizeof(float)",
                      "markdown": "`memcpy(centroids.data(), x_in, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9983,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids.data(), <size of centroids.data()>,  x_in,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f959276b-c89b-47bf-b38c-ea5d48858dcc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 12,
                  "endLine": 244,
                  "endColumn": 37,
                  "charOffset": 6897,
                  "charLength": 103,
                  "snippet": {
                    "text": "memcpy(centroids + ci * d,\n                   centroids + cj * d,\n                   sizeof(*centroids)",
                    "rendered": {
                      "text": "memcpy(centroids + ci * d,\n                   centroids + cj * d,\n                   sizeof(*centroids)",
                      "markdown": "`memcpy(centroids + ci * d,\n                   centroids + cj * d,\n                   sizeof(*centroids)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6897,
                        "charLength": 103
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids + ci * d, <size of centroids + ci * d>, \n                   centroids + cj * d, \n                   sizeof(*centroids)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c358f4c4-527d-44ae-acab-428c8ed93135",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/Clustering.cpp"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 8,
                  "endLine": 110,
                  "endColumn": 73,
                  "charOffset": 2774,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(x_new + i * line_size, x + perm[i] * line_size, line_size)",
                    "rendered": {
                      "text": "memcpy(x_new + i * line_size, x + perm[i] * line_size, line_size)",
                      "markdown": "`memcpy(x_new + i * line_size, x + perm[i] * line_size, line_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/Clustering.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2774,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x_new + i * line_size, <size of x_new + i * line_size>,  x + perm[i] * line_size,  line_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7269bb26-66df-4e95-ac88-fded8f3f19f8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/AlignedTable.h"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 12,
                  "endLine": 102,
                  "endColumn": 44,
                  "charOffset": 2191,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(ptr, other.ptr, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(ptr, other.ptr, sizeof(T)",
                      "markdown": "`memcpy(ptr, other.ptr, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/AlignedTable.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2191,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr, <size of ptr>,  other.ptr,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2ce26d8b-f00c-4e34-89a5-f7e4617bc1d6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/AlignedTable.h"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 16,
                  "endLine": 55,
                  "endColumn": 46,
                  "charOffset": 1245,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(new_ptr, ptr, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(new_ptr, ptr, sizeof(T)",
                      "markdown": "`memcpy(new_ptr, ptr, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/AlignedTable.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1245,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_ptr, <size of new_ptr>,  ptr,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9dd87820-148e-498a-abcd-9849bbfd7b1a",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 51,
                  "endLine": 520,
                  "endColumn": 54,
                  "charOffset": 12949,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12949,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12949,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-79ddf49c-e961-459a-bce3-2aa57f472cd2",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 34,
                  "endLine": 520,
                  "endColumn": 37,
                  "charOffset": 12932,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12932,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12932,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-d57fbe14-d78b-4127-84b4-ade27a0086cd",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 24,
                  "endLine": 517,
                  "endColumn": 27,
                  "charOffset": 12864,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12864,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12864,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-da8f6a83-c6a8-4921-a0ab-aa7be3a02afe",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 48,
                  "endLine": 441,
                  "endColumn": 51,
                  "charOffset": 11140,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11140,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11140,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-181ffd02-e2ed-4e61-8ade-81b3bd5af4f2",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 33,
                  "endLine": 439,
                  "endColumn": 36,
                  "charOffset": 11059,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11059,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11059,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-c611f2ec-f9b0-4f6a-b6a4-ea8d585f5d7e",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 50,
                  "endLine": 439,
                  "endColumn": 53,
                  "charOffset": 11076,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11076,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11076,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-5ed862b2-eb44-4860-b07c-ff34e3a357f7",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 23,
                  "endLine": 432,
                  "endColumn": 26,
                  "charOffset": 10930,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10930,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10930,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-ebd85744-85f8-4a12-bbec-f16e3717a282",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 34,
                  "endLine": 343,
                  "endColumn": 37,
                  "charOffset": 8559,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8559,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8559,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-ef21bf92-adab-44a9-bcfc-91bdf97fdfb7",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 47,
                  "endLine": 305,
                  "endColumn": 50,
                  "charOffset": 7663,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7663,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7663,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-3ad2693f-547a-4999-96e4-7a94aac55b04",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 50,
                  "endLine": 303,
                  "endColumn": 53,
                  "charOffset": 7600,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7600,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7600,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-1aed454b-ee26-4cf9-974e-ee95b140c3d4",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 33,
                  "endLine": 303,
                  "endColumn": 36,
                  "charOffset": 7583,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7583,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7583,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-5fd8b5fa-0fd7-4174-befc-fa799a9024bd",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 23,
                  "endLine": 292,
                  "endColumn": 26,
                  "charOffset": 7397,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7397,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7397,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-c5219476-d350-4839-b0ad-4689833075e5",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 35,
                  "endLine": 165,
                  "endColumn": 38,
                  "charOffset": 3937,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3937,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3937,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-a37114c4-e84e-4455-a3c1-1d4ef257e664",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 35,
                  "endLine": 158,
                  "endColumn": 38,
                  "charOffset": 3715,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3715,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3715,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-5515486b-4227-4bc7-ac63-3a9e60492921",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 49,
                  "endLine": 76,
                  "endColumn": 52,
                  "charOffset": 1463,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1463,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1463,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-81d17030-5907-4f97-8b24-a8a1c79843af",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 51,
                  "endLine": 74,
                  "endColumn": 54,
                  "charOffset": 1398,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1398,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1398,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-de2e7593-5f60-414b-99c9-a3e6001b462b",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 34,
                  "endLine": 74,
                  "endColumn": 37,
                  "charOffset": 1381,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1381,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1381,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-1ad5c746-b20a-451c-bca3-e13d8754774e",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 24,
                  "endLine": 63,
                  "endColumn": 27,
                  "charOffset": 1190,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1190,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1190,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-f2e83d91-3c47-4bde-8495-58d02f0e9dc6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 27,
                  "charOffset": 700,
                  "charLength": 19,
                  "snippet": {
                    "text": "memcpy(u8, ptr, 32)",
                    "rendered": {
                      "text": "memcpy(u8, ptr, 32)",
                      "markdown": "`memcpy(u8, ptr, 32)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 700,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "memcpy_s(u8, <size of u8>,  ptr,  32)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b5940a6f-dbb2-42cf-b015-76c7c0f0ac2f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8,
                  "endLine": 28,
                  "endColumn": 25,
                  "charOffset": 508,
                  "charLength": 17,
                  "snippet": {
                    "text": "memcpy(u8, x, 32)",
                    "rendered": {
                      "text": "memcpy(u8, x, 32)",
                      "markdown": "`memcpy(u8, x, 32)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 508,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "memcpy_s(u8, <size of u8>,  x,  32)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f0ab978a-6328-4193-af81-1764b01a8ad4",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "endLine": 27,
                  "endColumn": 18,
                  "charOffset": 474,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 474,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 474,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-eb83eab7-8297-4390-8924-d37bd8ad4e2f",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 6,
                  "endLine": 25,
                  "endColumn": 9,
                  "charOffset": 444,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 444,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 444,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-88a14ed7-3a4a-401c-b1f6-ff5a67432299",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/utils/simdlib_emulated.h"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "endLine": 17,
                  "endColumn": 12,
                  "charOffset": 310,
                  "charLength": 3,
                  "snippet": {
                    "text": "md2",
                    "rendered": {
                      "text": "md2",
                      "markdown": "`md2`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 310,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha512"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "A weak or broken hash algorithm was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/utils/simdlib_emulated.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 310,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "sha256"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Critical",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.BannedHashAlgorithm"
            ]
          }
        },
        {
          "ruleId": "glog-195c4de8-75cf-4e10-be06-3c5f0f7448ee",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexBinaryFlat.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 4,
                  "endLine": 101,
                  "endColumn": 58,
                  "charOffset": 2626,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(recons, &(xb[code_size * key]), sizeof(*recons)",
                    "rendered": {
                      "text": "memcpy(recons, &(xb[code_size * key]), sizeof(*recons)",
                      "markdown": "`memcpy(recons, &(xb[code_size * key]), sizeof(*recons)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexBinaryFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2626,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(recons, <size of recons>,  &(xb[code_size * key]),  sizeof(*recons)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-941d57a7-969f-4655-9c27-93ba060b0cad",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexRowwiseMinMax.cpp"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 17,
                  "endLine": 184,
                  "endColumn": 34,
                  "charOffset": 5258,
                  "charLength": 175,
                  "snippet": {
                    "text": "memcpy(\n                    tmp.data() + i * old_code_size,\n                    bytes + i * new_code_size + (new_code_size - old_code_size),\n                    old_code_size)",
                    "rendered": {
                      "text": "memcpy(\n                    tmp.data() + i * old_code_size,\n                    bytes + i * new_code_size + (new_code_size - old_code_size),\n                    old_code_size)",
                      "markdown": "`memcpy(\n                    tmp.data() + i * old_code_size,\n                    bytes + i * new_code_size + (new_code_size - old_code_size),\n                    old_code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexRowwiseMinMax.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5258,
                        "charLength": 175
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n                    tmp.data() + i * old_code_size, <size of \n                    tmp.data() + i * old_code_size>, \n                    bytes + i * new_code_size + (new_code_size - old_code_size), \n                    old_code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3018ebb7-0e40-4ab6-ba92-49a7cd82ec68",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexPQ.cpp"
                },
                "region": {
                  "startLine": 1069,
                  "startColumn": 12,
                  "endLine": 1069,
                  "endColumn": 55,
                  "charOffset": 30730,
                  "charLength": 43,
                  "snippet": {
                    "text": "memcpy(xdest, xsrc, dsub * sizeof(xdest[0])",
                    "rendered": {
                      "text": "memcpy(xdest, xsrc, dsub * sizeof(xdest[0])",
                      "markdown": "`memcpy(xdest, xsrc, dsub * sizeof(xdest[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexPQ.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 30730,
                        "charLength": 43
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xdest, <size of xdest>,  xsrc,  dsub * sizeof(xdest[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3886c924-8f9b-4680-98d2-c174ced60b7c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexPQ.cpp"
                },
                "region": {
                  "startLine": 980,
                  "startColumn": 8,
                  "endLine": 980,
                  "endColumn": 45,
                  "charOffset": 28240,
                  "charLength": 37,
                  "snippet": {
                    "text": "memcpy(recons, pq.get_centroids(m, n)",
                    "rendered": {
                      "text": "memcpy(recons, pq.get_centroids(m, n)",
                      "markdown": "`memcpy(recons, pq.get_centroids(m, n)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexPQ.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28240,
                        "charLength": 37
                      },
                      "insertedContent": {
                        "text": "memcpy_s(recons, <size of recons>,  pq.get_centroids(m,  n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bcf83ce2-2474-42d8-80df-33d368bcba0f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/AutoTune.cpp"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 47,
                  "endLine": 565,
                  "endColumn": 67,
                  "charOffset": 16173,
                  "charLength": 20,
                  "snippet": {
                    "text": "strlen(\"quantizer_\")",
                    "rendered": {
                      "text": "strlen(\"quantizer_\")",
                      "markdown": "`strlen(\"quantizer_\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16173,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16173,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strnlen(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bc3c7cd2-b659-4f3e-9a2c-786aff8ae8a6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/AutoTune.cpp"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 47,
                  "endLine": 470,
                  "endColumn": 67,
                  "charOffset": 13649,
                  "charLength": 20,
                  "snippet": {
                    "text": "strlen(\"quantizer_\")",
                    "rendered": {
                      "text": "strlen(\"quantizer_\")",
                      "markdown": "`strlen(\"quantizer_\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13649,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13649,
                        "charLength": 20
                      },
                      "insertedContent": {
                        "text": "strnlen(\"quantizer_\", <size of \"quantizer_\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-328e773b-76d3-4940-a750-3f04db4f1b71",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/AutoTune.cpp"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 4,
                  "endLine": 58,
                  "endColumn": 48,
                  "charOffset": 1478,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(gt_I.data(), gt_I_in, sizeof(gt_I[0])",
                    "rendered": {
                      "text": "memcpy(gt_I.data(), gt_I_in, sizeof(gt_I[0])",
                      "markdown": "`memcpy(gt_I.data(), gt_I_in, sizeof(gt_I[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1478,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(gt_I.data(), <size of gt_I.data()>,  gt_I_in,  sizeof(gt_I[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6e5da92f-6490-4e22-8e12-1976cdf00062",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/AutoTune.cpp"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 8,
                  "endLine": 55,
                  "endColumn": 52,
                  "charOffset": 1377,
                  "charLength": 44,
                  "snippet": {
                    "text": "memcpy(gt_D.data(), gt_D_in, sizeof(gt_D[0])",
                    "rendered": {
                      "text": "memcpy(gt_D.data(), gt_D_in, sizeof(gt_D[0])",
                      "markdown": "`memcpy(gt_D.data(), gt_D_in, sizeof(gt_D[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/AutoTune.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1377,
                        "charLength": 44
                      },
                      "insertedContent": {
                        "text": "memcpy_s(gt_D.data(), <size of gt_D.data()>,  gt_D_in,  sizeof(gt_D[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e61c5073-facd-4a83-bdb4-5db68a1bb89b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/python/python_callbacks.cpp"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 49,
                  "charOffset": 2603,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(ptr, PyBytes_AsString(result), sz)",
                    "rendered": {
                      "text": "memcpy(ptr, PyBytes_AsString(result), sz)",
                      "markdown": "`memcpy(ptr, PyBytes_AsString(result), sz)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/python/python_callbacks.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2603,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptr, <size of ptr>,  PyBytes_AsString(result),  sz)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ae939bd8-11a8-4b10-ad4e-d1e1d02a34e7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 19,
                  "endLine": 83,
                  "endColumn": 48,
                  "charOffset": 2487,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(k * nq * sizeof(idx_t)",
                    "rendered": {
                      "text": "malloc(k * nq * sizeof(idx_t)",
                      "markdown": "`malloc(k * nq * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2487,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-397ac12c-54ec-45a1-ad0a-f15cf1ec672c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 48,
                  "charOffset": 2538,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(k * nq * sizeof(float)",
                    "rendered": {
                      "text": "malloc(k * nq * sizeof(float)",
                      "markdown": "`malloc(k * nq * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2538,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-832b4ce7-44f6-4fb7-bfcb-b293cc306e90",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 19,
                  "endLine": 71,
                  "endColumn": 47,
                  "charOffset": 2105,
                  "charLength": 28,
                  "snippet": {
                    "text": "malloc(k * 5 * sizeof(float)",
                    "rendered": {
                      "text": "malloc(k * 5 * sizeof(float)",
                      "markdown": "`malloc(k * 5 * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2105,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-26219fd7-277d-46de-b10a-ddc75c5d7efa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 19,
                  "endLine": 70,
                  "endColumn": 47,
                  "charOffset": 2055,
                  "charLength": 28,
                  "snippet": {
                    "text": "malloc(k * 5 * sizeof(idx_t)",
                    "rendered": {
                      "text": "malloc(k * 5 * sizeof(idx_t)",
                      "markdown": "`malloc(k * 5 * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2055,
                        "charLength": 28
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f4d96683-898a-49a8-9638-2c3dc0d9851a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 16,
                  "endLine": 43,
                  "endColumn": 45,
                  "charOffset": 1205,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(d * nq * sizeof(float)",
                    "rendered": {
                      "text": "malloc(d * nq * sizeof(float)",
                      "markdown": "`malloc(d * nq * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1205,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-29f3b550-ab94-4032-a528-8b58131a8c37",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 16,
                  "endLine": 42,
                  "endColumn": 45,
                  "charOffset": 1157,
                  "charLength": 29,
                  "snippet": {
                    "text": "malloc(d * nb * sizeof(float)",
                    "rendered": {
                      "text": "malloc(d * nb * sizeof(float)",
                      "markdown": "`malloc(d * nb * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/example_c.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1157,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f2185ffe-3cc7-4037-b383-72e462fe7dde",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 36,
                  "endLine": 32,
                  "endColumn": 44,
                  "charOffset": 917,
                  "charLength": 8,
                  "snippet": {
                    "text": "RAND_MAX",
                    "rendered": {
                      "text": "RAND_MAX",
                      "markdown": "`RAND_MAX`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-28b43dcd-e614-4914-97d4-3b59979fc33a",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/example_c.c"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 19,
                  "endLine": 32,
                  "endColumn": 24,
                  "charOffset": 900,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-f7f3ec93-f7bd-452c-8ba8-4b1d2ae15367",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/AutoTune_c.cpp"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 8,
                  "endLine": 55,
                  "endColumn": 47,
                  "charOffset": 1544,
                  "charLength": 39,
                  "snippet": {
                    "text": "strncpy(char_buffer, rep.c_str(), size)",
                    "rendered": {
                      "text": "strncpy(char_buffer, rep.c_str(), size)",
                      "markdown": "`strncpy(char_buffer, rep.c_str(), size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/AutoTune_c.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1544,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "strcpy_s(char_buffer,  size,  rep.c_str())"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/AutoTune_c.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1544,
                        "charLength": 39
                      },
                      "insertedContent": {
                        "text": "strlcpy(char_buffer,  rep.c_str(),  size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f0317d08-0eca-4941-adac-ef48b70998a1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFPQ.cpp"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 16,
                  "endLine": 500,
                  "endColumn": 46,
                  "charOffset": 15154,
                  "charLength": 94,
                  "snippet": {
                    "text": "memcpy(centroids.data() + i * d + m * cpq.dsub,\n                       cpq.get_centroids(m, i)",
                    "rendered": {
                      "text": "memcpy(centroids.data() + i * d + m * cpq.dsub,\n                       cpq.get_centroids(m, i)",
                      "markdown": "`memcpy(centroids.data() + i * d + m * cpq.dsub,\n                       cpq.get_centroids(m, i)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFPQ.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15154,
                        "charLength": 94
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids.data() + i * d + m * cpq.dsub, <size of centroids.data() + i * d + m * cpq.dsub>, \n                       cpq.get_centroids(m,  i)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8705d325-d542-4889-b4b4-32bc9ea42aca",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexFlat.cpp"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 8,
                  "endLine": 179,
                  "endColumn": 38,
                  "charOffset": 5075,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(x, bytes, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(x, bytes, sizeof(float)",
                      "markdown": "`memcpy(x, bytes, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5075,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x, <size of x>,  bytes,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2774ac49-da56-4b3f-b31c-beff17f28128",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexFlat.cpp"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 8,
                  "endLine": 173,
                  "endColumn": 38,
                  "charOffset": 4925,
                  "charLength": 30,
                  "snippet": {
                    "text": "memcpy(bytes, x, sizeof(float)",
                    "rendered": {
                      "text": "memcpy(bytes, x, sizeof(float)",
                      "markdown": "`memcpy(bytes, x, sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4925,
                        "charLength": 30
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes, <size of bytes>,  x,  sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b59688a4-55f0-4ab4-bc41-0f30bdace81b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexFlat.cpp"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 4,
                  "endLine": 168,
                  "endColumn": 56,
                  "charOffset": 4768,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(recons, &(codes[key * code_size]), code_size)",
                    "rendered": {
                      "text": "memcpy(recons, &(codes[key * code_size]), code_size)",
                      "markdown": "`memcpy(recons, &(codes[key * code_size]), code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4768,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(recons, <size of recons>,  &(codes[key * code_size]),  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-98e4eb72-df2c-45ae-ab10-b4981601fa0a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 12,
                  "endLine": 386,
                  "endColumn": 63,
                  "charOffset": 11610,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(dis1 + j0, dis2.data() + j0, sizeof(dis2[0])",
                    "rendered": {
                      "text": "memcpy(dis1 + j0, dis2.data() + j0, sizeof(dis2[0])",
                      "markdown": "`memcpy(dis1 + j0, dis2.data() + j0, sizeof(dis2[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11610,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dis1 + j0, <size of dis1 + j0>,  dis2.data() + j0,  sizeof(dis2[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-22e0f5e4-fa82-4d5c-921b-9b0162a06625",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 12,
                  "endLine": 385,
                  "endColumn": 37,
                  "charOffset": 11486,
                  "charLength": 98,
                  "snippet": {
                    "text": "memcpy(labels1 + j0,\n                   labels2.data() + j0,\n                   sizeof(labels1[0])",
                    "rendered": {
                      "text": "memcpy(labels1 + j0,\n                   labels2.data() + j0,\n                   sizeof(labels1[0])",
                      "markdown": "`memcpy(labels1 + j0,\n                   labels2.data() + j0,\n                   sizeof(labels1[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11486,
                        "charLength": 98
                      },
                      "insertedContent": {
                        "text": "memcpy_s(labels1 + j0, <size of labels1 + j0>, \n                   labels2.data() + j0, \n                   sizeof(labels1[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-14436bd9-3949-40e3-a271-83bb9f3522b8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 12,
                  "endLine": 254,
                  "endColumn": 59,
                  "charOffset": 7549,
                  "charLength": 47,
                  "snippet": {
                    "text": "memcpy(x2.get() + n2 * d, x + i * d, code_size)",
                    "rendered": {
                      "text": "memcpy(x2.get() + n2 * d, x + i * d, code_size)",
                      "markdown": "`memcpy(x2.get() + n2 * d, x + i * d, code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7549,
                        "charLength": 47
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x2.get() + n2 * d, <size of x2.get() + n2 * d>,  x + i * d,  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-21801f86-d178-4e0f-8d6f-fedda107ace2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 4,
                  "endLine": 228,
                  "endColumn": 61,
                  "charOffset": 6676,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(recons, invlists->get_single_code(list_no, offset)",
                    "rendered": {
                      "text": "memcpy(recons, invlists->get_single_code(list_no, offset)",
                      "markdown": "`memcpy(recons, invlists->get_single_code(list_no, offset)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6676,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(recons, <size of recons>,  invlists->get_single_code(list_no,  offset)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-371783d2-e2d0-4ee4-83c6-7c075c1191bd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 8,
                  "endLine": 115,
                  "endColumn": 49,
                  "charOffset": 3146,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(xi, code + coarse_size, code_size)",
                    "rendered": {
                      "text": "memcpy(xi, code + coarse_size, code_size)",
                      "markdown": "`memcpy(xi, code + coarse_size, code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3146,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  code + coarse_size,  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-52030057-3176-4acf-83fd-9d1711aa65f7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 16,
                  "endLine": 102,
                  "endColumn": 57,
                  "charOffset": 2723,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(code + coarse_size, xi, code_size)",
                    "rendered": {
                      "text": "memcpy(code + coarse_size, xi, code_size)",
                      "markdown": "`memcpy(code + coarse_size, xi, code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2723,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(code + coarse_size, <size of code + coarse_size>,  xi,  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5e3fcbb8-6239-4443-98ee-789914e2c061",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexIVFFlat.cpp"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 8,
                  "endLine": 93,
                  "endColumn": 39,
                  "charOffset": 2342,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(codes, x, code_size * n)",
                    "rendered": {
                      "text": "memcpy(codes, x, code_size * n)",
                      "markdown": "`memcpy(codes, x, code_size * n)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexIVFFlat.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2342,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(codes, <size of codes>,  x,  code_size * n)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d991ed76-f549-4e0c-a46d-2d5bffef902a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexAdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 8,
                  "endLine": 578,
                  "endColumn": 39,
                  "charOffset": 19050,
                  "charLength": 119,
                  "snippet": {
                    "text": "memcpy(distances + i * k,\n               beam_distances.data() + beam_size * i,\n               k * sizeof(distances[0])",
                    "rendered": {
                      "text": "memcpy(distances + i * k,\n               beam_distances.data() + beam_size * i,\n               k * sizeof(distances[0])",
                      "markdown": "`memcpy(distances + i * k,\n               beam_distances.data() + beam_size * i,\n               k * sizeof(distances[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexAdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19050,
                        "charLength": 119
                      },
                      "insertedContent": {
                        "text": "memcpy_s(distances + i * k, <size of distances + i * k>, \n               beam_distances.data() + beam_size * i, \n               k * sizeof(distances[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b6945f42-fdfc-4f05-9446-0d2c7397c714",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AuxIndexStructures.cpp"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 8,
                  "endLine": 102,
                  "endColumn": 65,
                  "charOffset": 2671,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(dest_dis, buf.dis + ofs, ncopy * sizeof(*dest_dis)",
                    "rendered": {
                      "text": "memcpy(dest_dis, buf.dis + ofs, ncopy * sizeof(*dest_dis)",
                      "markdown": "`memcpy(dest_dis, buf.dis + ofs, ncopy * sizeof(*dest_dis)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AuxIndexStructures.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2671,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest_dis, <size of dest_dis>,  buf.dis + ofs,  ncopy * sizeof(*dest_dis)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a12fac8f-9a90-4c95-a1a5-c4470755e460",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AuxIndexStructures.cpp"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 8,
                  "endLine": 101,
                  "endColumn": 65,
                  "charOffset": 2603,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(dest_ids, buf.ids + ofs, ncopy * sizeof(*dest_ids)",
                    "rendered": {
                      "text": "memcpy(dest_ids, buf.ids + ofs, ncopy * sizeof(*dest_ids)",
                      "markdown": "`memcpy(dest_ids, buf.ids + ofs, ncopy * sizeof(*dest_ids)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AuxIndexStructures.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2603,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dest_ids, <size of dest_ids>,  buf.ids + ofs,  ncopy * sizeof(*dest_ids)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6a730700-9107-4255-ac70-933465b46597",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/CodePacker.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 4,
                  "endLine": 48,
                  "endColumn": 40,
                  "charOffset": 1197,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(flat_codes, block, code_size)",
                    "rendered": {
                      "text": "memcpy(flat_codes, block, code_size)",
                      "markdown": "`memcpy(flat_codes, block, code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/CodePacker.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1197,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(flat_codes, <size of flat_codes>,  block,  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7f64d17f-765c-4a92-840d-18c33ea7362a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/CodePacker.cpp"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 4,
                  "endLine": 43,
                  "endColumn": 40,
                  "charOffset": 1061,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(block, flat_codes, code_size)",
                    "rendered": {
                      "text": "memcpy(block, flat_codes, code_size)",
                      "markdown": "`memcpy(block, flat_codes, code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/CodePacker.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1061,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(block, <size of block>,  flat_codes,  code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4536fcea-8eed-4af7-ba74-fae6ebfc2f43",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexFlatCodes.cpp"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 4,
                  "endLine": 97,
                  "endColumn": 37,
                  "charOffset": 2783,
                  "charLength": 113,
                  "snippet": {
                    "text": "memcpy(codes.data() + (ntotal * code_size),\n           other->codes.data(),\n           other->ntotal * code_size)",
                    "rendered": {
                      "text": "memcpy(codes.data() + (ntotal * code_size),\n           other->codes.data(),\n           other->ntotal * code_size)",
                      "markdown": "`memcpy(codes.data() + (ntotal * code_size),\n           other->codes.data(),\n           other->ntotal * code_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexFlatCodes.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2783,
                        "charLength": 113
                      },
                      "insertedContent": {
                        "text": "memcpy_s(codes.data() + (ntotal * code_size), <size of codes.data() + (ntotal * code_size)>, \n           other->codes.data(), \n           other->ntotal * code_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-105b4f3d-fbe3-4b80-839e-99fc26c9b133",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "demos/demo_weighted_kmeans.cpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 4,
                  "endLine": 60,
                  "endColumn": 63,
                  "charOffset": 1457,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(centroids, clus.centroids.data(), sizeof(*centroids)",
                    "rendered": {
                      "text": "memcpy(centroids, clus.centroids.data(), sizeof(*centroids)",
                      "markdown": "`memcpy(centroids, clus.centroids.data(), sizeof(*centroids)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "demos/demo_weighted_kmeans.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1457,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids, <size of centroids>,  clus.centroids.data(),  sizeof(*centroids)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-19370df6-8bf3-47c7-b649-2ef238bef20f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "c_api/IndexIVF_c.cpp"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 4,
                  "endLine": 125,
                  "endColumn": 51,
                  "charOffset": 3571,
                  "charLength": 47,
                  "snippet": {
                    "text": "memcpy(invlist, list, list_size * sizeof(idx_t)",
                    "rendered": {
                      "text": "memcpy(invlist, list, list_size * sizeof(idx_t)",
                      "markdown": "`memcpy(invlist, list, list_size * sizeof(idx_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "c_api/IndexIVF_c.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3571,
                        "charLength": 47
                      },
                      "insertedContent": {
                        "text": "memcpy_s(invlist, <size of invlist>,  list,  list_size * sizeof(idx_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1fdb8be1-5cea-4741-ba61-b387f1024921",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/MetaIndexes.cpp"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 12,
                  "endLine": 99,
                  "endColumn": 76,
                  "charOffset": 3181,
                  "charLength": 64,
                  "snippet": {
                    "text": "memcpy(sub_x + i * sub_d, x + ofs + i * d, sub_d * sizeof(sub_x)",
                    "rendered": {
                      "text": "memcpy(sub_x + i * sub_d, x + ofs + i * d, sub_d * sizeof(sub_x)",
                      "markdown": "`memcpy(sub_x + i * sub_d, x + ofs + i * d, sub_d * sizeof(sub_x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/MetaIndexes.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3181,
                        "charLength": 64
                      },
                      "insertedContent": {
                        "text": "memcpy_s(sub_x + i * sub_d, <size of sub_x + i * sub_d>,  x + ofs + i * d,  sub_d * sizeof(sub_x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fc1af8e1-205a-4fb2-965e-aca8e2077819",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexRefine.cpp"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 8,
                  "endLine": 182,
                  "endColumn": 66,
                  "charOffset": 5618,
                  "charLength": 58,
                  "snippet": {
                    "text": "memcpy(tmp2.get() + i * cs2, bytes + i * (cs1 + cs2), cs2)",
                    "rendered": {
                      "text": "memcpy(tmp2.get() + i * cs2, bytes + i * (cs1 + cs2), cs2)",
                      "markdown": "`memcpy(tmp2.get() + i * cs2, bytes + i * (cs1 + cs2), cs2)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexRefine.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5618,
                        "charLength": 58
                      },
                      "insertedContent": {
                        "text": "memcpy_s(tmp2.get() + i * cs2, <size of tmp2.get() + i * cs2>,  bytes + i * (cs1 + cs2),  cs2)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e68b975b-a0a5-4fda-acfd-6a9842d6438c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexRefine.cpp"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 8,
                  "endLine": 173,
                  "endColumn": 50,
                  "charOffset": 5265,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(b + cs1, tmp2.get() + cs2 * i, cs2)",
                    "rendered": {
                      "text": "memcpy(b + cs1, tmp2.get() + cs2 * i, cs2)",
                      "markdown": "`memcpy(b + cs1, tmp2.get() + cs2 * i, cs2)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexRefine.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5265,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(b + cs1, <size of b + cs1>,  tmp2.get() + cs2 * i,  cs2)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a6a7dff4-ea5e-45c3-943d-36dbbe2cc4ea",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/IndexRefine.cpp"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 8,
                  "endLine": 172,
                  "endColumn": 44,
                  "charOffset": 5219,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(b, tmp1.get() + cs1 * i, cs1)",
                    "rendered": {
                      "text": "memcpy(b, tmp1.get() + cs1 * i, cs1)",
                      "markdown": "`memcpy(b, tmp1.get() + cs1 * i, cs1)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/IndexRefine.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5219,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(b, <size of b>,  tmp1.get() + cs1 * i,  cs1)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d1047fd2-34b0-4eac-9ac0-f1037dd98b49",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 4,
                  "endLine": 513,
                  "endColumn": 30,
                  "charOffset": 14757,
                  "charLength": 26,
                  "snippet": {
                    "text": "memcpy(&norm2, &norm_i, 4)",
                    "rendered": {
                      "text": "memcpy(&norm2, &norm_i, 4)",
                      "markdown": "`memcpy(&norm2, &norm_i, 4)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14757,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&norm2, <size of &norm2>,  &norm_i,  4)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-71767fa2-5ffc-4af8-99fe-2d3ca881776a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 12,
                  "endLine": 384,
                  "endColumn": 41,
                  "charOffset": 10698,
                  "charLength": 29,
                  "snippet": {
                    "text": "memcpy(ips, LUT, sizeof(*ips)",
                    "rendered": {
                      "text": "memcpy(ips, LUT, sizeof(*ips)",
                      "markdown": "`memcpy(ips, LUT, sizeof(*ips)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10698,
                        "charLength": 29
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ips, <size of ips>,  LUT,  sizeof(*ips)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-403a32fe-0687-4cf8-8d27-cc9d0960eba0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 12,
                  "endLine": 335,
                  "endColumn": 37,
                  "charOffset": 9620,
                  "charLength": 25,
                  "snippet": {
                    "text": "memcpy(xi, c, sizeof(*xi)",
                    "rendered": {
                      "text": "memcpy(xi, c, sizeof(*xi)",
                      "markdown": "`memcpy(xi, c, sizeof(*xi)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9620,
                        "charLength": 25
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  c,  sizeof(*xi)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f4ca6546-17fc-43e9-a5ec-6226455a27e3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 16,
                  "endLine": 301,
                  "endColumn": 40,
                  "charOffset": 8549,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(xi, c, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xi, c, sizeof(*x)",
                      "markdown": "`memcpy(xi, c, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8549,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  c,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4650046a-f00f-4c0a-bfb6-676cb6776965",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 16,
                  "endLine": 272,
                  "endColumn": 40,
                  "charOffset": 7730,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(xi, c, sizeof(*x)",
                    "rendered": {
                      "text": "memcpy(xi, c, sizeof(*x)",
                      "markdown": "`memcpy(xi, c, sizeof(*x)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7730,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xi, <size of xi>,  c,  sizeof(*x)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0a6f0c89-1b5f-46e9-97cc-d00e287e85ea",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/AdditiveQuantizer.cpp"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 12,
                  "endLine": 198,
                  "endColumn": 36,
                  "charOffset": 5148,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(&inorm, &norm, 4)",
                    "rendered": {
                      "text": "memcpy(&inorm, &norm, 4)",
                      "markdown": "`memcpy(&inorm, &norm, 4)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/AdditiveQuantizer.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5148,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&inorm, <size of &inorm>,  &norm,  4)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9bb8cf38-c7e6-4424-9480-e1643dbfe857",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/PolysemousTraining.cpp"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 12,
                  "endLine": 934,
                  "endColumn": 46,
                  "charOffset": 29263,
                  "charLength": 134,
                  "snippet": {
                    "text": "memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])",
                    "rendered": {
                      "text": "memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])",
                      "markdown": "`memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/PolysemousTraining.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29263,
                        "charLength": 134
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids + perm[i] * dsub, <size of centroids + perm[i] * dsub>, \n                   centroids_copy.data() + i * dsub, \n                   dsub * sizeof(centroids[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e72adb38-c375-4e96-a7fc-c1861c76edd6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/PolysemousTraining.cpp"
                },
                "region": {
                  "startLine": 854,
                  "startColumn": 16,
                  "endLine": 856,
                  "endColumn": 36,
                  "charOffset": 26855,
                  "charLength": 117,
                  "snippet": {
                    "text": "memcpy(xtrain.data() + i * dsub,\n                       x + i * pq.d + m * dsub,\n                       sizeof(float)",
                    "rendered": {
                      "text": "memcpy(xtrain.data() + i * dsub,\n                       x + i * pq.d + m * dsub,\n                       sizeof(float)",
                      "markdown": "`memcpy(xtrain.data() + i * dsub,\n                       x + i * pq.d + m * dsub,\n                       sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/PolysemousTraining.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26855,
                        "charLength": 117
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xtrain.data() + i * dsub, <size of xtrain.data() + i * dsub>, \n                       x + i * pq.d + m * dsub, \n                       sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-13454d14-b65b-4d33-b0e3-b8825516ac41",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/PolysemousTraining.cpp"
                },
                "region": {
                  "startLine": 878,
                  "startColumn": 12,
                  "endLine": 880,
                  "endColumn": 32,
                  "charOffset": 27593,
                  "charLength": 114,
                  "snippet": {
                    "text": "memcpy(gt_distances.data(),\n                   pq.sdc_table.data() + m * nq * nb,\n                   sizeof(float)",
                    "rendered": {
                      "text": "memcpy(gt_distances.data(),\n                   pq.sdc_table.data() + m * nq * nb,\n                   sizeof(float)",
                      "markdown": "`memcpy(gt_distances.data(),\n                   pq.sdc_table.data() + m * nq * nb,\n                   sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/PolysemousTraining.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 27593,
                        "charLength": 114
                      },
                      "insertedContent": {
                        "text": "memcpy_s(gt_distances.data(), <size of gt_distances.data()>, \n                   pq.sdc_table.data() + m * nq * nb, \n                   sizeof(float)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8fab83eb-3dfa-4980-b92b-6acd4af440a2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/PolysemousTraining.cpp"
                },
                "region": {
                  "startLine": 822,
                  "startColumn": 12,
                  "endLine": 824,
                  "endColumn": 46,
                  "charOffset": 25981,
                  "charLength": 134,
                  "snippet": {
                    "text": "memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])",
                    "rendered": {
                      "text": "memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])",
                      "markdown": "`memcpy(centroids + perm[i] * dsub,\n                   centroids_copy.data() + i * dsub,\n                   dsub * sizeof(centroids[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/PolysemousTraining.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 25981,
                        "charLength": 134
                      },
                      "insertedContent": {
                        "text": "memcpy_s(centroids + perm[i] * dsub, <size of centroids + perm[i] * dsub>, \n                   centroids_copy.data() + i * dsub, \n                   dsub * sizeof(centroids[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d74d48d4-563f-4e46-8984-1dafdb22dbaf",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/impl/PolysemousTraining.cpp"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 12,
                  "endLine": 94,
                  "endColumn": 58,
                  "charOffset": 2619,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(best_perm, perm.data(), sizeof(perm[0])",
                    "rendered": {
                      "text": "memcpy(best_perm, perm.data(), sizeof(perm[0])",
                      "markdown": "`memcpy(best_perm, perm.data(), sizeof(perm[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/impl/PolysemousTraining.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2619,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(best_perm, <size of best_perm>,  perm.data(),  sizeof(perm[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5de98f90-9913-4bb3-b0a4-0293460b3437",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/VectorTransform.cpp"
                },
                "region": {
                  "startLine": 1243,
                  "startColumn": 4,
                  "endLine": 1243,
                  "endColumn": 31,
                  "charOffset": 33944,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(x, xt, sizeof(xt[0])",
                    "rendered": {
                      "text": "memcpy(x, xt, sizeof(xt[0])",
                      "markdown": "`memcpy(x, xt, sizeof(xt[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/VectorTransform.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33944,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(x, <size of x>,  xt,  sizeof(xt[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d3675d77-468e-4ebc-a4aa-5db7d90f8331",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/VectorTransform.cpp"
                },
                "region": {
                  "startLine": 1232,
                  "startColumn": 8,
                  "endLine": 1232,
                  "endColumn": 34,
                  "charOffset": 33681,
                  "charLength": 26,
                  "snippet": {
                    "text": "memcpy(xt, x, sizeof(x[0])",
                    "rendered": {
                      "text": "memcpy(xt, x, sizeof(x[0])",
                      "markdown": "`memcpy(xt, x, sizeof(x[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/VectorTransform.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 33681,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "memcpy_s(xt, <size of xt>,  x,  sizeof(x[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2d2d746a-1d8b-4eb7-9cda-8fe84b478cc5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/VectorTransform.cpp"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 8,
                  "endLine": 742,
                  "endColumn": 42,
                  "charOffset": 19533,
                  "charLength": 103,
                  "snippet": {
                    "text": "memcpy(rotation.data(),\n               init_rotation.data(),\n               d * d * sizeof(rotation[0])",
                    "rendered": {
                      "text": "memcpy(rotation.data(),\n               init_rotation.data(),\n               d * d * sizeof(rotation[0])",
                      "markdown": "`memcpy(rotation.data(),\n               init_rotation.data(),\n               d * d * sizeof(rotation[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/VectorTransform.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19533,
                        "charLength": 103
                      },
                      "insertedContent": {
                        "text": "memcpy_s(rotation.data(), <size of rotation.data()>, \n               init_rotation.data(), \n               d * d * sizeof(rotation[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bf215c74-3912-460a-be2b-859118e554de",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "faiss/VectorTransform.cpp"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 16,
                  "endLine": 664,
                  "endColumn": 78,
                  "charOffset": 17437,
                  "charLength": 62,
                  "snippet": {
                    "text": "memcpy(&A[row_dst * d_in], &Ain[i * d_in], d_in * sizeof(A[0])",
                    "rendered": {
                      "text": "memcpy(&A[row_dst * d_in], &Ain[i * d_in], d_in * sizeof(A[0])",
                      "markdown": "`memcpy(&A[row_dst * d_in], &Ain[i * d_in], d_in * sizeof(A[0])`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "faiss/VectorTransform.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17437,
                        "charLength": 62
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&A[row_dst * d_in], <size of &A[row_dst * d_in]>,  &Ain[i * d_in],  d_in * sizeof(A[0])"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}